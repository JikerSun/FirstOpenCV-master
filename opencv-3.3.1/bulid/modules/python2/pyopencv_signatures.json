{"cv::dnn::Layer::forward": [{"name": "forward", "ret": "outputs, internals", "arg": "inputs, outputs, internals"}], "cv::ml::SVM::setGamma": [{"name": "setGamma", "ret": "None", "arg": "val"}], "cv::solveP3P": [{"name": "solveP3P", "ret": "retval, rvecs, tvecs", "arg": "objectPoints, imagePoints, cameraMatrix, distCoeffs, flags[, rvecs[, tvecs]]"}], "cv::ml::ANN_MLP::setRpropDWPlus": [{"name": "setRpropDWPlus", "ret": "None", "arg": "val"}], "cv::HausdorffDistanceExtractor::setRankProportion": [{"name": "setRankProportion", "ret": "None", "arg": "rankProportion"}], "cv::FarnebackOpticalFlow::setNumIters": [{"name": "setNumIters", "ret": "None", "arg": "numIters"}], "cv::FarnebackOpticalFlow::setPolySigma": [{"name": "setPolySigma", "ret": "None", "arg": "polySigma"}], "cv::AKAZE::create": [{"name": "AKAZE_create", "ret": "retval", "arg": "[, descriptor_type[, descriptor_size[, descriptor_channels[, threshold[, nOctaves[, nOctaveLayers[, diffusivity]]]]]]]"}], "cv::undistort": [{"name": "undistort", "ret": "dst", "arg": "src, cameraMatrix, distCoeffs[, dst[, newCameraMatrix]]"}], "cv::dnn::Net::setParam": [{"name": "setParam", "ret": "None", "arg": "layer, numParam, blob"}], "cv::ShapeContextDistanceExtractor::getBendingEnergyWeight": [{"name": "getBendingEnergyWeight", "ret": "retval", "arg": ""}], "cv::ml::TrainData::getNames": [{"name": "getNames", "ret": "None", "arg": "names"}], "cv::createTonemapDrago": [{"name": "createTonemapDrago", "ret": "retval", "arg": "[, gamma[, saturation[, bias]]]"}], "cv::ml::ANN_MLP::cv::ml::ANN_MLP::load": [{"name": "load", "ret": "retval", "arg": "filepath"}], "cv::FastFeatureDetector::cv::FastFeatureDetector::create": [{"name": "create", "ret": "retval", "arg": "[, threshold[, nonmaxSuppression[, type]]]"}], "cv::createChiHistogramCostExtractor": [{"name": "createChiHistogramCostExtractor", "ret": "retval", "arg": "[, nDummies[, defaultCost]]"}], "cv::fitLine": [{"name": "fitLine", "ret": "line", "arg": "points, distType, param, reps, aeps[, line]"}], "cv::accumulateSquare": [{"name": "accumulateSquare", "ret": "dst", "arg": "src, dst[, mask]"}], "cv::DMatch::cv::DMatch::DMatch": [{"name": "DMatch", "ret": "<DMatch object>", "arg": ""}, {"name": "DMatch", "ret": "<DMatch object>", "arg": "_queryIdx, _trainIdx, _distance"}, {"name": "DMatch", "ret": "<DMatch object>", "arg": "_queryIdx, _trainIdx, _imgIdx, _distance"}], "cv::trace": [{"name": "trace", "ret": "retval", "arg": "mtx"}], "cv::cubeRoot": [{"name": "cubeRoot", "ret": "retval", "arg": "val"}], "cv::TonemapMantiuk::getScale": [{"name": "getScale", "ret": "retval", "arg": ""}], "cv::filterSpeckles": [{"name": "filterSpeckles", "ret": "img, buf", "arg": "img, newVal, maxSpeckleSize, maxDiff[, buf]"}], "cv::ml::SVMSGD::getTermCriteria": [{"name": "getTermCriteria", "ret": "retval", "arg": ""}], "cv::ml::RTrees::getTermCriteria": [{"name": "getTermCriteria", "ret": "retval", "arg": ""}], "cv::dct": [{"name": "dct", "ret": "dst", "arg": "src[, dst[, flags]]"}], "cv::correctMatches": [{"name": "correctMatches", "ret": "newPoints1, newPoints2", "arg": "F, points1, points2[, newPoints1[, newPoints2]]"}], "cv::TonemapDurand::getSaturation": [{"name": "getSaturation", "ret": "retval", "arg": ""}], "cv::StereoBM::setSmallerBlockSize": [{"name": "setSmallerBlockSize", "ret": "None", "arg": "blockSize"}], "cv::inRange": [{"name": "inRange", "ret": "dst", "arg": "src, lowerb, upperb[, dst]"}], "cv::MergeExposures::process": [{"name": "process", "ret": "dst", "arg": "src, times, response[, dst]"}], "cv::groupRectangles": [{"name": "groupRectangles", "ret": "rectList, weights", "arg": "rectList, groupThreshold[, eps]"}], "cv::SparsePyrLKOpticalFlow::getWinSize": [{"name": "getWinSize", "ret": "retval", "arg": ""}], "cv::ShapeTransformer::estimateTransformation": [{"name": "estimateTransformation", "ret": "None", "arg": "transformingShape, targetShape, matches"}], "cv::contourArea": [{"name": "contourArea", "ret": "retval", "arg": "contour[, oriented]"}], "cv::randShuffle": [{"name": "randShuffle", "ret": "dst", "arg": "dst[, iterFactor]"}], "cv::AlignMTB::getMaxBits": [{"name": "getMaxBits", "ret": "retval", "arg": ""}], "cv::DescriptorMatcher::match": [{"name": "match", "ret": "matches", "arg": "queryDescriptors, trainDescriptors[, mask]"}, {"name": "match", "ret": "matches", "arg": "queryDescriptors[, masks]"}], "cv::seamlessClone": [{"name": "seamlessClone", "ret": "blend", "arg": "src, dst, mask, p, flags[, blend]"}], "cv::FileStorage::root": [{"name": "root", "ret": "retval", "arg": "[, streamidx]"}], "cv::BFMatcher::cv::BFMatcher::create": [{"name": "create", "ret": "retval", "arg": "[, normType[, crossCheck]]"}], "cv::GFTTDetector::getK": [{"name": "getK", "ret": "retval", "arg": ""}], "cv::Tonemap::setGamma": [{"name": "setGamma", "ret": "None", "arg": "gamma"}], "cv::BackgroundSubtractorMOG2::setBackgroundRatio": [{"name": "setBackgroundRatio", "ret": "None", "arg": "ratio"}], "cv::findFundamentalMat": [{"name": "findFundamentalMat", "ret": "retval, mask", "arg": "points1, points2[, method[, param1[, param2[, mask]]]]"}], "cv::ml::LogisticRegression::setTermCriteria": [{"name": "setTermCriteria", "ret": "None", "arg": "val"}], "cv::estimateAffinePartial2D": [{"name": "estimateAffinePartial2D", "ret": "retval, inliers", "arg": "from, to[, inliers[, method[, ransacReprojThreshold[, maxIters[, confidence[, refineIters]]]]]]"}], "cv::displayOverlay": [{"name": "displayOverlay", "ret": "None", "arg": "winname, text[, delayms]"}], "cv::dnn::Net::cv::dnn::Net::Net": [{"name": "Net", "ret": "<dnn_Net object>", "arg": ""}], "cv::pyrDown": [{"name": "pyrDown", "ret": "dst", "arg": "src[, dst[, dstsize[, borderType]]]"}], "cv::Stitcher::setPanoConfidenceThresh": [{"name": "setPanoConfidenceThresh", "ret": "None", "arg": "conf_thresh"}], "cv::DescriptorMatcher::clone": [{"name": "clone", "ret": "retval", "arg": "[, emptyTrainData]"}], "cv::imread": [{"name": "imread", "ret": "retval", "arg": "filename[, flags]"}], "cv::getTickCount": [{"name": "getTickCount", "ret": "retval", "arg": ""}], "cv::dnn::Net::enableFusion": [{"name": "enableFusion", "ret": "None", "arg": "fusion"}], "cv::StereoSGBM::setPreFilterCap": [{"name": "setPreFilterCap", "ret": "None", "arg": "preFilterCap"}], "cv::AKAZE::getNOctaveLayers": [{"name": "getNOctaveLayers", "ret": "retval", "arg": ""}], "cv::FileStorage::open": [{"name": "open", "ret": "retval", "arg": "filename, flags[, encoding]"}], "cv::ml::TrainData::getNormCatResponses": [{"name": "getNormCatResponses", "ret": "retval", "arg": ""}], "cv::flann::Index::save": [{"name": "save", "ret": "None", "arg": "filename"}], "cv::CalibrateRobertson::getMaxIter": [{"name": "getMaxIter", "ret": "retval", "arg": ""}], "cv::ipp::getIppVersion": [{"name": "getIppVersion", "ret": "retval", "arg": ""}], "cv::ml::Boost::cv::ml::Boost::load": [{"name": "load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::ml::Boost::setWeightTrimRate": [{"name": "setWeightTrimRate", "ret": "None", "arg": "val"}], "cv::ml::Boost::cv::ml::Boost::create": [{"name": "create", "ret": "retval", "arg": ""}], "cv::ml::LogisticRegression::setRegularization": [{"name": "setRegularization", "ret": "None", "arg": "val"}], "cv::ORB::setFirstLevel": [{"name": "setFirstLevel", "ret": "None", "arg": "firstLevel"}], "cv::createTonemapDurand": [{"name": "createTonemapDurand", "ret": "retval", "arg": "[, gamma[, contrast[, saturation[, sigma_space[, sigma_color]]]]]"}], "cv::ml::ANN_MLP::getTermCriteria": [{"name": "getTermCriteria", "ret": "retval", "arg": ""}], "cv::scaleAdd": [{"name": "scaleAdd", "ret": "dst", "arg": "src1, alpha, src2[, dst]"}], "cv::findChessboardCorners": [{"name": "findChessboardCorners", "ret": "retval, corners", "arg": "image, patternSize[, corners[, flags]]"}], "cv::solvePnP": [{"name": "solvePnP", "ret": "retval, rvec, tvec", "arg": "objectPoints, imagePoints, cameraMatrix, distCoeffs[, rvec[, tvec[, useExtrinsicGuess[, flags]]]]"}], "cv::findEssentialMat": [{"name": "findEssentialMat", "ret": "retval, mask", "arg": "points1, points2, cameraMatrix[, method[, prob[, threshold[, mask]]]]"}, {"name": "findEssentialMat", "ret": "retval, mask", "arg": "points1, points2[, focal[, pp[, method[, prob[, threshold[, mask]]]]]]"}], "cv::setIdentity": [{"name": "setIdentity", "ret": "mtx", "arg": "mtx[, s]"}], "cv::resizeWindow": [{"name": "resizeWindow", "ret": "None", "arg": "winname, width, height"}, {"name": "resizeWindow", "ret": "None", "arg": "winname, size"}], "cv::DualTVL1OpticalFlow::create": [{"name": "DualTVL1OpticalFlow_create", "ret": "retval", "arg": "[, tau[, lambda[, theta[, nscales[, warps[, epsilon[, innnerIterations[, outerIterations[, scaleStep[, gamma[, medianFiltering[, useInitialFlow]]]]]]]]]]]]"}], "cv::MergeRobertson::process": [{"name": "process", "ret": "dst", "arg": "src, times, response[, dst]"}, {"name": "process", "ret": "dst", "arg": "src, times[, dst]"}], "cv::GFTTDetector::setK": [{"name": "setK", "ret": "None", "arg": "k"}], "cv::accumulate": [{"name": "accumulate", "ret": "dst", "arg": "src, dst[, mask]"}], "cv::ml::TrainData::getCatCount": [{"name": "getCatCount", "ret": "retval", "arg": "vi"}], "cv::ShapeContextDistanceExtractor::getIterations": [{"name": "getIterations", "ret": "retval", "arg": ""}], "cv::AKAZE::getDescriptorChannels": [{"name": "getDescriptorChannels", "ret": "retval", "arg": ""}], "cv::fisheye::estimateNewCameraMatrixForUndistortRectify": [{"name": "estimateNewCameraMatrixForUndistortRectify", "ret": "P", "arg": "K, D, image_size, R[, P[, balance[, new_size[, fov_scale]]]]"}], "cv::AKAZE::setThreshold": [{"name": "setThreshold", "ret": "None", "arg": "threshold"}], "cv::ml::DTrees::create": [{"name": "DTrees_create", "ret": "retval", "arg": ""}], "cv::ml::LogisticRegression::setIterations": [{"name": "setIterations", "ret": "None", "arg": "val"}], "cv::moveWindow": [{"name": "moveWindow", "ret": "None", "arg": "winname, x, y"}], "cv::DenseOpticalFlow::collectGarbage": [{"name": "collectGarbage", "ret": "None", "arg": ""}], "cv::BRISK::cv::BRISK::create": [{"name": "create", "ret": "retval", "arg": "[, thresh[, octaves[, patternScale]]]"}, {"name": "create", "ret": "retval", "arg": "radiusList, numberList[, dMax[, dMin[, indexChange]]]"}, {"name": "create", "ret": "retval", "arg": "thresh, octaves, radiusList, numberList[, dMax[, dMin[, indexChange]]]"}], "cv::Feature2D::detect": [{"name": "detect", "ret": "keypoints", "arg": "image[, mask]"}, {"name": "detect", "ret": "keypoints", "arg": "images[, masks]"}], "cv::ml::LogisticRegression::getRegularization": [{"name": "getRegularization", "ret": "retval", "arg": ""}], "cv::StereoMatcher::setDisp12MaxDiff": [{"name": "setDisp12MaxDiff", "ret": "None", "arg": "disp12MaxDiff"}], "cv::TickMeter::getTimeMilli": [{"name": "getTimeMilli", "ret": "retval", "arg": ""}], "cv::DualTVL1OpticalFlow::getScaleStep": [{"name": "getScaleStep", "ret": "retval", "arg": ""}], "cv::TickMeter::stop": [{"name": "stop", "ret": "None", "arg": ""}], "cv::dnn::Net::empty": [{"name": "empty", "ret": "retval", "arg": ""}], "cv::ml::SVM::setTermCriteria": [{"name": "setTermCriteria", "ret": "None", "arg": "val"}], "cv::BackgroundSubtractorMOG2::getVarThreshold": [{"name": "getVarThreshold", "ret": "retval", "arg": ""}], "cv::BackgroundSubtractorMOG2::getVarThresholdGen": [{"name": "getVarThresholdGen", "ret": "retval", "arg": ""}], "cv::ml::KNearest::getIsClassifier": [{"name": "getIsClassifier", "ret": "retval", "arg": ""}], "cv::KAZE::setDiffusivity": [{"name": "setDiffusivity", "ret": "None", "arg": "diff"}], "cv::ShapeContextDistanceExtractor::getOuterRadius": [{"name": "getOuterRadius", "ret": "retval", "arg": ""}], "cv::dnn::DictValue::cv::dnn::DictValue::DictValue": [{"name": "DictValue", "ret": "<dnn_DictValue object>", "arg": "i"}, {"name": "DictValue", "ret": "<dnn_DictValue object>", "arg": "p"}, {"name": "DictValue", "ret": "<dnn_DictValue object>", "arg": "s"}], "cv::transform": [{"name": "transform", "ret": "dst", "arg": "src, m[, dst]"}], "cv::ml::NormalBayesClassifier::load": [{"name": "NormalBayesClassifier_load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::ml::EM::predict2": [{"name": "predict2", "ret": "retval, probs", "arg": "sample[, probs]"}], "cv::checkHardwareSupport": [{"name": "checkHardwareSupport", "ret": "retval", "arg": "feature"}], "cv::CalibrateDebevec::setSamples": [{"name": "setSamples", "ret": "None", "arg": "samples"}], "cv::ThinPlateSplineShapeTransformer::setRegularizationParameter": [{"name": "setRegularizationParameter", "ret": "None", "arg": "beta"}], "cv::KalmanFilter::correct": [{"name": "correct", "ret": "retval", "arg": "measurement"}], "cv::estimateRigidTransform": [{"name": "estimateRigidTransform", "ret": "retval", "arg": "src, dst, fullAffine"}], "cv::MSER::getDelta": [{"name": "getDelta", "ret": "retval", "arg": ""}], "cv::Stitcher::setSeamEstimationResol": [{"name": "setSeamEstimationResol", "ret": "None", "arg": "resol_mpx"}], "cv::Subdiv2D::nextEdge": [{"name": "nextEdge", "ret": "retval", "arg": "edge"}], "cv::flann::Index::build": [{"name": "build", "ret": "None", "arg": "features, params[, distType]"}], "cv::solveLP": [{"name": "solveLP", "ret": "retval", "arg": "Func, Constr, z"}], "cv::calibrationMatrixValues": [{"name": "calibrationMatrixValues", "ret": "fovx, fovy, focalLength, principalPoint, aspectRatio", "arg": "cameraMatrix, imageSize, apertureWidth, apertureHeight"}], "cv::AgastFeatureDetector::getThreshold": [{"name": "getThreshold", "ret": "retval", "arg": ""}], "cv::MergeMertens::getExposureWeight": [{"name": "getExposureWeight", "ret": "retval", "arg": ""}], "cv::watershed": [{"name": "watershed", "ret": "markers", "arg": "image, markers"}], "cv::SparsePyrLKOpticalFlow::getTermCriteria": [{"name": "getTermCriteria", "ret": "retval", "arg": ""}], "cv::getTextSize": [{"name": "getTextSize", "ret": "retval, baseLine", "arg": "text, fontFace, fontScale, thickness"}], "cv::cornerHarris": [{"name": "cornerHarris", "ret": "dst", "arg": "src, blockSize, ksize, k[, dst[, borderType]]"}], "cv::ml::SVMSGD::setOptimalParameters": [{"name": "setOptimalParameters", "ret": "None", "arg": "[, svmsgdType[, marginType]]"}], "cv::ml::EM::create": [{"name": "EM_create", "ret": "retval", "arg": ""}], "cv::TickMeter::getTimeSec": [{"name": "getTimeSec", "ret": "retval", "arg": ""}], "cv::fastNlMeansDenoisingMulti": [{"name": "fastNlMeansDenoisingMulti", "ret": "dst", "arg": "srcImgs, imgToDenoiseIndex, temporalWindowSize[, dst[, h[, templateWindowSize[, searchWindowSize]]]]"}, {"name": "fastNlMeansDenoisingMulti", "ret": "dst", "arg": "srcImgs, imgToDenoiseIndex, temporalWindowSize, h[, dst[, templateWindowSize[, searchWindowSize[, normType]]]]"}], "cv::GFTTDetector::cv::GFTTDetector::create": [{"name": "create", "ret": "retval", "arg": "[, maxCorners[, qualityLevel[, minDistance[, blockSize[, useHarrisDetector[, k]]]]]]"}, {"name": "create", "ret": "retval", "arg": "maxCorners, qualityLevel, minDistance, blockSize, gradiantSize[, useHarrisDetector[, k]]"}], "cv::DescriptorMatcher::clear": [{"name": "clear", "ret": "None", "arg": ""}], "cv::rectangle": [{"name": "rectangle", "ret": "img", "arg": "img, pt1, pt2, color[, thickness[, lineType[, shift]]]"}], "cv::projectPoints": [{"name": "projectPoints", "ret": "imagePoints, jacobian", "arg": "objectPoints, rvec, tvec, cameraMatrix, distCoeffs[, imagePoints[, jacobian[, aspectRatio]]]"}], "cv::fastNlMeansDenoisingColoredMulti": [{"name": "fastNlMeansDenoisingColoredMulti", "ret": "dst", "arg": "srcImgs, imgToDenoiseIndex, temporalWindowSize[, dst[, h[, hColor[, templateWindowSize[, searchWindowSize]]]]]"}], "cv::ORB::getScoreType": [{"name": "getScoreType", "ret": "retval", "arg": ""}], "cv::BackgroundSubtractorKNN::setDist2Threshold": [{"name": "setDist2Threshold", "ret": "None", "arg": "_dist2Threshold"}], "cv::flann::Index::getDistance": [{"name": "getDistance", "ret": "retval", "arg": ""}], "cv::add": [{"name": "add", "ret": "dst", "arg": "src1, src2[, dst[, mask[, dtype]]]"}], "cv::KAZE::create": [{"name": "KAZE_create", "ret": "retval", "arg": "[, extended[, upright[, threshold[, nOctaves[, nOctaveLayers[, diffusivity]]]]]]"}], "cv::StereoMatcher::setNumDisparities": [{"name": "setNumDisparities", "ret": "None", "arg": "numDisparities"}], "cv::BackgroundSubtractorKNN::setkNNSamples": [{"name": "setkNNSamples", "ret": "None", "arg": "_nkNN"}], "cv::BackgroundSubtractorMOG2::getShadowValue": [{"name": "getShadowValue", "ret": "retval", "arg": ""}], "cv::CascadeClassifier::detectMultiScale": [{"name": "detectMultiScale", "ret": "objects", "arg": "image[, scaleFactor[, minNeighbors[, flags[, minSize[, maxSize]]]]]"}, {"name": "detectMultiScale2", "ret": "objects, numDetections", "arg": "image[, scaleFactor[, minNeighbors[, flags[, minSize[, maxSize]]]]]"}, {"name": "detectMultiScale3", "ret": "objects, rejectLevels, levelWeights", "arg": "image[, scaleFactor[, minNeighbors[, flags[, minSize[, maxSize[, outputRejectLevels]]]]]]"}], "cv::floodFill": [{"name": "floodFill", "ret": "retval, image, mask, rect", "arg": "image, mask, seedPoint, newVal[, loDiff[, upDiff[, flags]]]"}], "cv::Feature2D::defaultNorm": [{"name": "defaultNorm", "ret": "retval", "arg": ""}], "cv::TonemapMantiuk::getSaturation": [{"name": "getSaturation", "ret": "retval", "arg": ""}], "cv::getAffineTransform": [{"name": "getAffineTransform", "ret": "retval", "arg": "src, dst"}], "cv::ml::EM::getClustersNumber": [{"name": "getClustersNumber", "ret": "retval", "arg": ""}], "cv::DualTVL1OpticalFlow::getOuterIterations": [{"name": "getOuterIterations", "ret": "retval", "arg": ""}], "cv::FastFeatureDetector::getNonmaxSuppression": [{"name": "getNonmaxSuppression", "ret": "retval", "arg": ""}], "cv::Laplacian": [{"name": "Laplacian", "ret": "dst", "arg": "src, ddepth[, dst[, ksize[, scale[, delta[, borderType]]]]]"}], "cv::ml::RTrees::cv::ml::RTrees::load": [{"name": "load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::ShapeContextDistanceExtractor::setInnerRadius": [{"name": "setInnerRadius", "ret": "None", "arg": "innerRadius"}], "cv::ml::TrainData::getVarType": [{"name": "getVarType", "ret": "retval", "arg": ""}], "cv::BRISK::create": [{"name": "BRISK_create", "ret": "retval", "arg": "[, thresh[, octaves[, patternScale]]]"}, {"name": "BRISK_create", "ret": "retval", "arg": "radiusList, numberList[, dMax[, dMin[, indexChange]]]"}, {"name": "BRISK_create", "ret": "retval", "arg": "thresh, octaves, radiusList, numberList[, dMax[, dMin[, indexChange]]]"}], "cv::Stitcher::registrationResol": [{"name": "registrationResol", "ret": "retval", "arg": ""}], "cv::NormHistogramCostExtractor::getNormFlag": [{"name": "getNormFlag", "ret": "retval", "arg": ""}], "cv::ShapeDistanceExtractor::computeDistance": [{"name": "computeDistance", "ret": "retval", "arg": "contour1, contour2"}], "cv::KAZE::getUpright": [{"name": "getUpright", "ret": "retval", "arg": ""}], "cv::HOGDescriptor::getWinSigma": [{"name": "getWinSigma", "ret": "retval", "arg": ""}], "cv::setTrackbarPos": [{"name": "setTrackbarPos", "ret": "None", "arg": "trackbarname, winname, pos"}], "cv::Canny": [{"name": "Canny", "ret": "edges", "arg": "image, threshold1, threshold2[, edges[, apertureSize[, L2gradient]]]"}, {"name": "Canny", "ret": "edges", "arg": "dx, dy, threshold1, threshold2[, edges[, L2gradient]]"}], "cv::FarnebackOpticalFlow::getPolySigma": [{"name": "getPolySigma", "ret": "retval", "arg": ""}], "cv::calibrateCamera": [{"name": "calibrateCamera", "ret": "retval, cameraMatrix, distCoeffs, rvecs, tvecs", "arg": "objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs[, rvecs[, tvecs[, flags[, criteria]]]]"}, {"name": "calibrateCameraExtended", "ret": "retval, cameraMatrix, distCoeffs, rvecs, tvecs, stdDeviationsIntrinsics, stdDeviationsExtrinsics, perViewErrors", "arg": "objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs[, rvecs[, tvecs[, stdDeviationsIntrinsics[, stdDeviationsExtrinsics[, perViewErrors[, flags[, criteria]]]]]]]"}], "cv::ml::StatModel::predict": [{"name": "predict", "ret": "retval, results", "arg": "samples[, results[, flags]]"}], "cv::edgePreservingFilter": [{"name": "edgePreservingFilter", "ret": "dst", "arg": "src[, dst[, flags[, sigma_s[, sigma_r]]]]"}], "cv::FastFeatureDetector::setType": [{"name": "setType", "ret": "None", "arg": "type"}], "cv::StereoBM::cv::StereoBM::create": [{"name": "create", "ret": "retval", "arg": "[, numDisparities[, blockSize]]"}], "cv::AgastFeatureDetector::getNonmaxSuppression": [{"name": "getNonmaxSuppression", "ret": "retval", "arg": ""}], "cv::cvtColor": [{"name": "cvtColor", "ret": "dst", "arg": "src, code[, dst[, dstCn]]"}], "cv::selectROI": [{"name": "selectROI", "ret": "retval", "arg": "windowName, img[, showCrosshair[, fromCenter]]"}, {"name": "selectROI", "ret": "retval", "arg": "img[, showCrosshair[, fromCenter]]"}], "cv::TickMeter::getTimeTicks": [{"name": "getTimeTicks", "ret": "retval", "arg": ""}], "cv::ml::NormalBayesClassifier::predictProb": [{"name": "predictProb", "ret": "retval, outputs, outputProbs", "arg": "inputs[, outputs[, outputProbs[, flags]]]"}], "cv::Subdiv2D::symEdge": [{"name": "symEdge", "ret": "retval", "arg": "edge"}], "cv::SparsePyrLKOpticalFlow::setWinSize": [{"name": "setWinSize", "ret": "None", "arg": "winSize"}], "cv::ml::SVMSGD::getMarginRegularization": [{"name": "getMarginRegularization", "ret": "retval", "arg": ""}], "cv::ORB::getNLevels": [{"name": "getNLevels", "ret": "retval", "arg": ""}], "cv::addText": [{"name": "addText", "ret": "None", "arg": "img, text, org, nameFont[, pointSize[, color[, weight[, style[, spacing]]]]]"}], "cv::StereoBM::setPreFilterSize": [{"name": "setPreFilterSize", "ret": "None", "arg": "preFilterSize"}], "cv::VideoCapture::get": [{"name": "get", "ret": "retval", "arg": "propId"}], "cv::SparseOpticalFlow::calc": [{"name": "calc", "ret": "nextPts, status, err", "arg": "prevImg, nextImg, prevPts, nextPts[, status[, err]]"}], "cv::BackgroundSubtractorMOG2::getBackgroundRatio": [{"name": "getBackgroundRatio", "ret": "retval", "arg": ""}], "cv::createTonemapReinhard": [{"name": "createTonemapReinhard", "ret": "retval", "arg": "[, gamma[, intensity[, light_adapt[, color_adapt]]]]"}], "cv::ml::EM::setCovarianceMatrixType": [{"name": "setCovarianceMatrixType", "ret": "None", "arg": "val"}], "cv::BOWTrainer::clear": [{"name": "clear", "ret": "None", "arg": ""}], "cv::circle": [{"name": "circle", "ret": "img", "arg": "img, center, radius, color[, thickness[, lineType[, shift]]]"}], "cv::ml::ANN_MLP::setBackpropWeightScale": [{"name": "setBackpropWeightScale", "ret": "None", "arg": "val"}], "cv::TonemapDurand::getSigmaColor": [{"name": "getSigmaColor", "ret": "retval", "arg": ""}], "cv::DualTVL1OpticalFlow::cv::DualTVL1OpticalFlow::create": [{"name": "create", "ret": "retval", "arg": "[, tau[, lambda[, theta[, nscales[, warps[, epsilon[, innnerIterations[, outerIterations[, scaleStep[, gamma[, medianFiltering[, useInitialFlow]]]]]]]]]]]]"}], "cv::TonemapDurand::setSaturation": [{"name": "setSaturation", "ret": "None", "arg": "saturation"}], "cv::StereoSGBM::getP2": [{"name": "getP2", "ret": "retval", "arg": ""}], "cv::ocl::finish": [{"name": "finish", "ret": "None", "arg": ""}], "cv::KeyPoint::cv::KeyPoint::overlap": [{"name": "overlap", "ret": "retval", "arg": "kp1, kp2"}], "cv::StereoMatcher::setSpeckleRange": [{"name": "setSpeckleRange", "ret": "None", "arg": "speckleRange"}], "cv::computeCorrespondEpilines": [{"name": "computeCorrespondEpilines", "ret": "lines", "arg": "points, whichImage, F[, lines]"}], "cv::fisheye::initUndistortRectifyMap": [{"name": "initUndistortRectifyMap", "ret": "map1, map2", "arg": "K, D, R, P, size, m1type[, map1[, map2]]"}], "cv::BackgroundSubtractorKNN::getHistory": [{"name": "getHistory", "ret": "retval", "arg": ""}], "cv::bilateralFilter": [{"name": "bilateralFilter", "ret": "dst", "arg": "src, d, sigmaColor, sigmaSpace[, dst[, borderType]]"}], "cv::exp": [{"name": "exp", "ret": "dst", "arg": "src[, dst]"}], "cv::ml::TrainData::getVarSymbolFlags": [{"name": "getVarSymbolFlags", "ret": "retval", "arg": ""}], "cv::calcBackProject": [{"name": "calcBackProject", "ret": "dst", "arg": "images, channels, hist, ranges, scale[, dst]"}], "cv::GFTTDetector::getQualityLevel": [{"name": "getQualityLevel", "ret": "retval", "arg": ""}], "cv::matchTemplate": [{"name": "matchTemplate", "ret": "result", "arg": "image, templ, method[, result[, mask]]"}], "cv::boxPoints": [{"name": "boxPoints", "ret": "points", "arg": "box[, points]"}], "cv::ml::SVM::setClassWeights": [{"name": "setClassWeights", "ret": "None", "arg": "val"}], "cv::ml::LogisticRegression::cv::ml::LogisticRegression::load": [{"name": "load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::ml::SVM::setKernel": [{"name": "setKernel", "ret": "None", "arg": "kernelType"}], "cv::ShapeContextDistanceExtractor::getImageAppearanceWeight": [{"name": "getImageAppearanceWeight", "ret": "retval", "arg": ""}], "cv::fisheye::stereoCalibrate": [{"name": "stereoCalibrate", "ret": "retval, K1, D1, K2, D2, R, T", "arg": "objectPoints, imagePoints1, imagePoints2, K1, D1, K2, D2, imageSize[, R[, T[, flags[, criteria]]]]"}], "cv::ml::SVMSGD::setMarginRegularization": [{"name": "setMarginRegularization", "ret": "None", "arg": "marginRegularization"}], "cv::HOGDescriptor::getDescriptorSize": [{"name": "getDescriptorSize", "ret": "retval", "arg": ""}], "cv::CascadeClassifier::isOldFormatCascade": [{"name": "isOldFormatCascade", "ret": "retval", "arg": ""}], "cv::setTrackbarMax": [{"name": "setTrackbarMax", "ret": "None", "arg": "trackbarname, winname, maxval"}], "cv::BOWKMeansTrainer::cluster": [{"name": "cluster", "ret": "retval", "arg": ""}, {"name": "cluster", "ret": "retval", "arg": "descriptors"}], "cv::ml::SVM::trainAuto": [{"name": "trainAuto", "ret": "retval", "arg": "samples, layout, responses[, kFold[, Cgrid[, gammaGrid[, pGrid[, nuGrid[, coeffGrid[, degreeGrid[, balanced]]]]]]]]"}], "cv::ml::ANN_MLP::getBackpropWeightScale": [{"name": "getBackpropWeightScale", "ret": "retval", "arg": ""}], "cv::ml::DTrees::setRegressionAccuracy": [{"name": "setRegressionAccuracy", "ret": "None", "arg": "val"}], "cv::ShapeContextDistanceExtractor::getRadialBins": [{"name": "getRadialBins", "ret": "retval", "arg": ""}], "cv::createCalibrateRobertson": [{"name": "createCalibrateRobertson", "ret": "retval", "arg": "[, max_iter[, threshold]]"}], "cv::ml::SVMSGD::getWeights": [{"name": "getWeights", "ret": "retval", "arg": ""}], "cv::ml::LogisticRegression::setLearningRate": [{"name": "setLearningRate", "ret": "None", "arg": "val"}], "cv::line": [{"name": "line", "ret": "img", "arg": "img, pt1, pt2, color[, thickness[, lineType[, shift]]]"}], "cv::minEnclosingCircle": [{"name": "minEnclosingCircle", "ret": "center, radius", "arg": "points"}], "cv::CascadeClassifier::getOriginalWindowSize": [{"name": "getOriginalWindowSize", "ret": "retval", "arg": ""}], "cv::AlignMTB::process": [{"name": "process", "ret": "None", "arg": "src, dst, times, response"}, {"name": "process", "ret": "None", "arg": "src, dst"}], "cv::AKAZE::getDiffusivity": [{"name": "getDiffusivity", "ret": "retval", "arg": ""}], "cv::wrapperEMD": [{"name": "EMD", "ret": "retval, lowerBound, flow", "arg": "signature1, signature2, distType[, cost[, lowerBound[, flow]]]"}], "cv::KAZE::getExtended": [{"name": "getExtended", "ret": "retval", "arg": ""}], "cv::ml::ANN_MLP::getLayerSizes": [{"name": "getLayerSizes", "ret": "retval", "arg": ""}], "cv::ml::ANN_MLP::getWeights": [{"name": "getWeights", "ret": "retval", "arg": "layerIdx"}], "cv::ORB::setScaleFactor": [{"name": "setScaleFactor", "ret": "None", "arg": "scaleFactor"}], "cv::ShapeContextDistanceExtractor::setRadialBins": [{"name": "setRadialBins", "ret": "None", "arg": "nRadialBins"}], "cv::namedWindow": [{"name": "namedWindow", "ret": "None", "arg": "winname[, flags]"}], "cv::MergeDebevec::process": [{"name": "process", "ret": "dst", "arg": "src, times, response[, dst]"}, {"name": "process", "ret": "dst", "arg": "src, times[, dst]"}], "cv::ml::Boost::load": [{"name": "Boost_load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::ORB::getPatchSize": [{"name": "getPatchSize", "ret": "retval", "arg": ""}], "cv::FarnebackOpticalFlow::getPyrScale": [{"name": "getPyrScale", "ret": "retval", "arg": ""}], "cv::fillConvexPoly": [{"name": "fillConvexPoly", "ret": "img", "arg": "img, points, color[, lineType[, shift]]"}], "cv::FileNode::name": [{"name": "name", "ret": "retval", "arg": ""}], "cv::HausdorffDistanceExtractor::setDistanceFlag": [{"name": "setDistanceFlag", "ret": "None", "arg": "distanceFlag"}], "cv::ml::SVM::getNu": [{"name": "getNu", "ret": "retval", "arg": ""}], "cv::resize": [{"name": "resize", "ret": "dst", "arg": "src, dsize[, dst[, fx[, fy[, interpolation]]]]"}], "cv::ml::LogisticRegression::getLearningRate": [{"name": "getLearningRate", "ret": "retval", "arg": ""}], "cv::HOGDescriptor::getDefaultPeopleDetector": [{"name": "HOGDescriptor_getDefaultPeopleDetector", "ret": "retval", "arg": ""}], "cv::drawMarker": [{"name": "drawMarker", "ret": "img", "arg": "img, position, color[, markerType[, markerSize[, thickness[, line_type]]]]"}], "cv::KalmanFilter::predict": [{"name": "predict", "ret": "retval", "arg": "[, control]"}], "cv::ml::DTrees::setCVFolds": [{"name": "setCVFolds", "ret": "None", "arg": "val"}], "cv::DualTVL1OpticalFlow::getInnerIterations": [{"name": "getInnerIterations", "ret": "retval", "arg": ""}], "cv::ml::NormalBayesClassifier::create": [{"name": "NormalBayesClassifier_create", "ret": "retval", "arg": ""}], "cv::dnn::Net::getFLOPS": [{"name": "getFLOPS", "ret": "retval", "arg": "netInputShapes"}, {"name": "getFLOPS", "ret": "retval", "arg": "netInputShape"}, {"name": "getFLOPS", "ret": "retval", "arg": "layerId, netInputShapes"}, {"name": "getFLOPS", "ret": "retval", "arg": "layerId, netInputShape"}], "cv::initCameraMatrix2D": [{"name": "initCameraMatrix2D", "ret": "retval", "arg": "objectPoints, imagePoints, imageSize[, aspectRatio]"}], "cv::fastNlMeansDenoisingColored": [{"name": "fastNlMeansDenoisingColored", "ret": "dst", "arg": "src[, dst[, h[, hColor[, templateWindowSize[, searchWindowSize]]]]]"}], "cv::fitEllipseDirect": [{"name": "fitEllipseDirect", "ret": "retval", "arg": "points"}], "cv::StereoSGBM::getUniquenessRatio": [{"name": "getUniquenessRatio", "ret": "retval", "arg": ""}], "cv::HOGDescriptor::cv::HOGDescriptor::HOGDescriptor": [{"name": "HOGDescriptor", "ret": "<HOGDescriptor object>", "arg": ""}, {"name": "HOGDescriptor", "ret": "<HOGDescriptor object>", "arg": "_winSize, _blockSize, _blockStride, _cellSize, _nbins[, _derivAperture[, _winSigma[, _histogramNormType[, _L2HysThreshold[, _gammaCorrection[, _nlevels[, _signedGradient]]]]]]]"}, {"name": "HOGDescriptor", "ret": "<HOGDescriptor object>", "arg": "filename"}], "cv::ml::SVM::getUncompressedSupportVectors": [{"name": "getUncompressedSupportVectors", "ret": "retval", "arg": ""}], "cv::bitwise_xor": [{"name": "bitwise_xor", "ret": "dst", "arg": "src1, src2[, dst[, mask]]"}], "cv::AKAZE::setDiffusivity": [{"name": "setDiffusivity", "ret": "None", "arg": "diff"}], "cv::CalibrateDebevec::getRandom": [{"name": "getRandom", "ret": "retval", "arg": ""}], "cv::BackgroundSubtractorMOG2::getVarMax": [{"name": "getVarMax", "ret": "retval", "arg": ""}], "cv::dnn::Net::getLayerId": [{"name": "getLayerId", "ret": "retval", "arg": "layer"}], "cv::subtract": [{"name": "subtract", "ret": "dst", "arg": "src1, src2[, dst[, mask[, dtype]]]"}], "cv::drawChessboardCorners": [{"name": "drawChessboardCorners", "ret": "image", "arg": "image, patternSize, corners, patternWasFound"}], "cv::initWideAngleProjMap": [{"name": "initWideAngleProjMap", "ret": "retval, map1, map2", "arg": "cameraMatrix, distCoeffs, imageSize, destImageWidth, m1type[, map1[, map2[, projType[, alpha]]]]"}], "cv::BOWTrainer::cluster": [{"name": "cluster", "ret": "retval", "arg": ""}, {"name": "cluster", "ret": "retval", "arg": "descriptors"}], "cv::HistogramCostExtractor::buildCostMatrix": [{"name": "buildCostMatrix", "ret": "costMatrix", "arg": "descriptors1, descriptors2[, costMatrix]"}], "cv::HOGDescriptor::detectMultiScale": [{"name": "detectMultiScale", "ret": "foundLocations, foundWeights", "arg": "img[, hitThreshold[, winStride[, padding[, scale[, finalThreshold[, useMeanshiftGrouping]]]]]]"}], "cv::BOWImgDescriptorExtractor::cv::BOWImgDescriptorExtractor::BOWImgDescriptorExtractor": [{"name": "BOWImgDescriptorExtractor", "ret": "<BOWImgDescriptorExtractor object>", "arg": "dextractor, dmatcher"}], "cv::VideoWriter::set": [{"name": "set", "ret": "retval", "arg": "propId, value"}], "cv::bitwise_not": [{"name": "bitwise_not", "ret": "dst", "arg": "src[, dst[, mask]]"}], "cv::ml::SVM::setP": [{"name": "setP", "ret": "None", "arg": "val"}], "cv::ml::DTrees::setPriors": [{"name": "setPriors", "ret": "None", "arg": "val"}], "cv::FileStorage::release": [{"name": "release", "ret": "None", "arg": ""}], "cv::BackgroundSubtractorMOG2::setShadowValue": [{"name": "setShadowValue", "ret": "None", "arg": "value"}], "cv::ShapeContextDistanceExtractor::getTransformAlgorithm": [{"name": "getTransformAlgorithm", "ret": "retval", "arg": ""}], "cv::ml::KNearest::getAlgorithmType": [{"name": "getAlgorithmType", "ret": "retval", "arg": ""}], "cv::ShapeContextDistanceExtractor::setAngularBins": [{"name": "setAngularBins", "ret": "None", "arg": "nAngularBins"}], "cv::divide": [{"name": "divide", "ret": "dst", "arg": "src1, src2[, dst[, scale[, dtype]]]"}, {"name": "divide", "ret": "dst", "arg": "scale, src2[, dst[, dtype]]"}], "cv::ShapeContextDistanceExtractor::setImageAppearanceWeight": [{"name": "setImageAppearanceWeight", "ret": "None", "arg": "imageAppearanceWeight"}], "cv::ml::Boost::getWeightTrimRate": [{"name": "getWeightTrimRate", "ret": "retval", "arg": ""}], "cv::ml::SVMSGD::cv::ml::SVMSGD::create": [{"name": "create", "ret": "retval", "arg": ""}], "cv::ml::KNearest::setIsClassifier": [{"name": "setIsClassifier", "ret": "None", "arg": "val"}], "cv::FileNode::isString": [{"name": "isString", "ret": "retval", "arg": ""}], "cv::Subdiv2D::getVertex": [{"name": "getVertex", "ret": "retval, firstEdge", "arg": "vertex"}], "cv::KAZE::getNOctaves": [{"name": "getNOctaves", "ret": "retval", "arg": ""}], "cv::ml::TrainData::create": [{"name": "TrainData_create", "ret": "retval", "arg": "samples, layout, responses[, varIdx[, sampleIdx[, sampleWeights[, varType]]]]"}], "cv::SparsePyrLKOpticalFlow::setFlags": [{"name": "setFlags", "ret": "None", "arg": "flags"}], "cv::FarnebackOpticalFlow::setWinSize": [{"name": "setWinSize", "ret": "None", "arg": "winSize"}], "cv::FastFeatureDetector::getDefaultName": [{"name": "getDefaultName", "ret": "retval", "arg": ""}], "cv::ORB::getEdgeThreshold": [{"name": "getEdgeThreshold", "ret": "retval", "arg": ""}], "cv::validateDisparity": [{"name": "validateDisparity", "ret": "disparity", "arg": "disparity, cost, minDisparity, numberOfDisparities[, disp12MaxDisp]"}], "cv::dnn::DictValue::getStringValue": [{"name": "getStringValue", "ret": "retval", "arg": "[, idx]"}], "cv::TickMeter::getCounter": [{"name": "getCounter", "ret": "retval", "arg": ""}], "cv::KAZE::getDiffusivity": [{"name": "getDiffusivity", "ret": "retval", "arg": ""}], "cv::AKAZE::setDescriptorSize": [{"name": "setDescriptorSize", "ret": "None", "arg": "dsize"}], "cv::FileNode::string": [{"name": "string", "ret": "retval", "arg": ""}], "cv::ShapeTransformer::applyTransformation": [{"name": "applyTransformation", "ret": "retval, output", "arg": "input[, output]"}], "cv::getNumThreads": [{"name": "getNumThreads", "ret": "retval", "arg": ""}], "cv::BOWImgDescriptorExtractor::compute2": [{"name": "compute", "ret": "imgDescriptor", "arg": "image, keypoints[, imgDescriptor]"}], "cv::FastFeatureDetector::create": [{"name": "FastFeatureDetector_create", "ret": "retval", "arg": "[, threshold[, nonmaxSuppression[, type]]]"}], "cv::ml::EM::setClustersNumber": [{"name": "setClustersNumber", "ret": "None", "arg": "val"}], "cv::TonemapDurand::setSigmaColor": [{"name": "setSigmaColor", "ret": "None", "arg": "sigma_color"}], "cv::TonemapReinhard::getIntensity": [{"name": "getIntensity", "ret": "retval", "arg": ""}], "cv::Stitcher::setCompositingResol": [{"name": "setCompositingResol", "ret": "None", "arg": "resol_mpx"}], "cv::Feature2D::empty": [{"name": "empty", "ret": "retval", "arg": ""}], "cv::SparsePyrLKOpticalFlow::setMaxLevel": [{"name": "setMaxLevel", "ret": "None", "arg": "maxLevel"}], "cv::ml::StatModel::getVarCount": [{"name": "getVarCount", "ret": "retval", "arg": ""}], "cv::ml::ANN_MLP::getRpropDWMinus": [{"name": "getRpropDWMinus", "ret": "retval", "arg": ""}], "cv::FileStorage::releaseAndGetString": [{"name": "releaseAndGetString", "ret": "retval", "arg": ""}], "cv::RQDecomp3x3": [{"name": "RQDecomp3x3", "ret": "retval, mtxR, mtxQ, Qx, Qy, Qz", "arg": "src[, mtxR[, mtxQ[, Qx[, Qy[, Qz]]]]]"}], "cv::dnn::shrinkCaffeModel": [{"name": "shrinkCaffeModel", "ret": "None", "arg": "src, dst"}], "cv::AgastFeatureDetector::setThreshold": [{"name": "setThreshold", "ret": "None", "arg": "threshold"}], "cv::SimpleBlobDetector::cv::SimpleBlobDetector::create": [{"name": "create", "ret": "retval", "arg": "[, parameters]"}], "cv::createLineSegmentDetector": [{"name": "createLineSegmentDetector", "ret": "retval", "arg": "[, _refine[, _scale[, _sigma_scale[, _quant[, _ang_th[, _log_eps[, _density_th[, _n_bins]]]]]]]]"}], "cv::initUndistortRectifyMap": [{"name": "initUndistortRectifyMap", "ret": "map1, map2", "arg": "cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type[, map1[, map2]]"}], "cv::ml::KNearest::setEmax": [{"name": "setEmax", "ret": "None", "arg": "val"}], "cv::ORB::getMaxFeatures": [{"name": "getMaxFeatures", "ret": "retval", "arg": ""}], "cv::ml::RTrees::create": [{"name": "RTrees_create", "ret": "retval", "arg": ""}], "cv::vconcat": [{"name": "vconcat", "ret": "dst", "arg": "src[, dst]"}], "cv::Rodrigues": [{"name": "Rodrigues", "ret": "dst, jacobian", "arg": "src[, dst[, jacobian]]"}], "cv::ml::LogisticRegression::setTrainMethod": [{"name": "setTrainMethod", "ret": "None", "arg": "val"}], "cv::AgastFeatureDetector::setNonmaxSuppression": [{"name": "setNonmaxSuppression", "ret": "None", "arg": "f"}], "cv::DualTVL1OpticalFlow::setGamma": [{"name": "setGamma", "ret": "None", "arg": "val"}], "cv::ml::ANN_MLP::setActivationFunction": [{"name": "setActivationFunction", "ret": "None", "arg": "type[, param1[, param2]]"}], "cv::GFTTDetector::setHarrisDetector": [{"name": "setHarrisDetector", "ret": "None", "arg": "val"}], "cv::Subdiv2D::initDelaunay": [{"name": "initDelaunay", "ret": "None", "arg": "rect"}], "cv::ml::EM::cv::ml::EM::load": [{"name": "load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::ml::SVM::getSupportVectors": [{"name": "getSupportVectors", "ret": "retval", "arg": ""}], "cv::ml::ANN_MLP::setLayerSizes": [{"name": "setLayerSizes", "ret": "None", "arg": "_layer_sizes"}], "cv::StereoBM::setUniquenessRatio": [{"name": "setUniquenessRatio", "ret": "None", "arg": "uniquenessRatio"}], "cv::ml::TrainData::getSamples": [{"name": "getSamples", "ret": "retval", "arg": ""}], "cv::BackgroundSubtractorMOG2::getComplexityReductionThreshold": [{"name": "getComplexityReductionThreshold", "ret": "retval", "arg": ""}], "cv::ml::LogisticRegression::get_learnt_thetas": [{"name": "get_learnt_thetas", "ret": "retval", "arg": ""}], "cv::SVBackSubst": [{"name": "SVBackSubst", "ret": "dst", "arg": "w, u, vt, rhs[, dst]"}], "cv::calcHist": [{"name": "calcHist", "ret": "hist", "arg": "images, channels, mask, histSize, ranges[, hist[, accumulate]]"}], "cv::Feature2D::detectAndCompute": [{"name": "detectAndCompute", "ret": "keypoints, descriptors", "arg": "image, mask[, descriptors[, useProvidedKeypoints]]"}], "cv::AKAZE::setDescriptorType": [{"name": "setDescriptorType", "ret": "None", "arg": "dtype"}], "cv::accumulateProduct": [{"name": "accumulateProduct", "ret": "dst", "arg": "src1, src2, dst[, mask]"}], "cv::Subdiv2D::getEdgeList": [{"name": "getEdgeList", "ret": "edgeList", "arg": ""}], "cv::BOWImgDescriptorExtractor::getVocabulary": [{"name": "getVocabulary", "ret": "retval", "arg": ""}], "cv::StereoMatcher::compute": [{"name": "compute", "ret": "disparity", "arg": "left, right[, disparity]"}], "cv::isContourConvex": [{"name": "isContourConvex", "ret": "retval", "arg": "contour"}], "cv::ml::DTrees::getPriors": [{"name": "getPriors", "ret": "retval", "arg": ""}], "cv::FarnebackOpticalFlow::create": [{"name": "FarnebackOpticalFlow_create", "ret": "retval", "arg": "[, numLevels[, pyrScale[, fastPyramids[, winSize[, numIters[, polyN[, polySigma[, flags]]]]]]]]"}], "cv::dnn::Net::setHalideScheduler": [{"name": "setHalideScheduler", "ret": "None", "arg": "scheduler"}], "cv::TonemapReinhard::getLightAdaptation": [{"name": "getLightAdaptation", "ret": "retval", "arg": ""}], "cv::MergeMertens::getContrastWeight": [{"name": "getContrastWeight", "ret": "retval", "arg": ""}], "cv::flann::Index::load": [{"name": "load", "ret": "retval", "arg": "features, filename"}], "cv::createNormHistogramCostExtractor": [{"name": "createNormHistogramCostExtractor", "ret": "retval", "arg": "[, flag[, nDummies[, defaultCost]]]"}], "cv::FastFeatureDetector::setThreshold": [{"name": "setThreshold", "ret": "None", "arg": "threshold"}], "cv::StereoBM::setROI2": [{"name": "setROI2", "ret": "None", "arg": "roi2"}], "cv::StereoBM::setROI1": [{"name": "setROI1", "ret": "None", "arg": "roi1"}], "cv::BackgroundSubtractorKNN::setShadowValue": [{"name": "setShadowValue", "ret": "None", "arg": "value"}], "cv::StereoMatcher::setMinDisparity": [{"name": "setMinDisparity", "ret": "None", "arg": "minDisparity"}], "cv::LineSegmentDetector::drawSegments": [{"name": "drawSegments", "ret": "_image", "arg": "_image, lines"}], "cv::ml::TrainData::getCatMap": [{"name": "getCatMap", "ret": "retval", "arg": ""}], "cv::dnn::Net::getMemoryConsumption": [{"name": "getMemoryConsumption", "ret": "weights, blobs", "arg": "netInputShape"}, {"name": "getMemoryConsumption", "ret": "weights, blobs", "arg": "layerId, netInputShapes"}, {"name": "getMemoryConsumption", "ret": "weights, blobs", "arg": "layerId, netInputShape"}], "cv::HistogramCostExtractor::getDefaultCost": [{"name": "getDefaultCost", "ret": "retval", "arg": ""}], "cv::ipp::useIPP": [{"name": "useIPP", "ret": "retval", "arg": ""}], "cv::DescriptorMatcher::getTrainDescriptors": [{"name": "getTrainDescriptors", "ret": "retval", "arg": ""}], "cv::HOGDescriptor::cv::HOGDescriptor::getDefaultPeopleDetector": [{"name": "getDefaultPeopleDetector", "ret": "retval", "arg": ""}], "cv::DualTVL1OpticalFlow::getScalesNumber": [{"name": "getScalesNumber", "ret": "retval", "arg": ""}], "cv::ml::Boost::create": [{"name": "Boost_create", "ret": "retval", "arg": ""}], "cv::compareHist": [{"name": "compareHist", "ret": "retval", "arg": "H1, H2, method"}], "cv::BOWImgDescriptorExtractor::descriptorSize": [{"name": "descriptorSize", "ret": "retval", "arg": ""}], "cv::absdiff": [{"name": "absdiff", "ret": "dst", "arg": "src1, src2[, dst]"}], "cv::FileStorage::cv::FileStorage::FileStorage": [{"name": "FileStorage", "ret": "<FileStorage object>", "arg": ""}, {"name": "FileStorage", "ret": "<FileStorage object>", "arg": "source, flags[, encoding]"}], "cv::addWeighted": [{"name": "addWeighted", "ret": "dst", "arg": "src1, alpha, src2, beta, gamma[, dst[, dtype]]"}], "cv::ORB::create": [{"name": "ORB_create", "ret": "retval", "arg": "[, nfeatures[, scaleFactor[, nlevels[, edgeThreshold[, firstLevel[, WTA_K[, scoreType[, patchSize[, fastThreshold]]]]]]]]]"}], "cv::FileNode::type": [{"name": "type", "ret": "retval", "arg": ""}], "cv::BackgroundSubtractor::getBackgroundImage": [{"name": "getBackgroundImage", "ret": "backgroundImage", "arg": "[, backgroundImage]"}], "cv::ocl::haveAmdFft": [{"name": "haveAmdFft", "ret": "retval", "arg": ""}], "cv::DualTVL1OpticalFlow::setWarpingsNumber": [{"name": "setWarpingsNumber", "ret": "None", "arg": "val"}], "cv::BackgroundSubtractorKNN::getNSamples": [{"name": "getNSamples", "ret": "retval", "arg": ""}], "cv::MergeMertens::setExposureWeight": [{"name": "setExposureWeight", "ret": "None", "arg": "exposure_weight"}], "cv::KAZE::getThreshold": [{"name": "getThreshold", "ret": "retval", "arg": ""}], "cv::ml::SVM::getCoef0": [{"name": "getCoef0", "ret": "retval", "arg": ""}], "cv::MSER::getPass2Only": [{"name": "getPass2Only", "ret": "retval", "arg": ""}], "cv::DescriptorMatcher::train": [{"name": "train", "ret": "None", "arg": ""}], "cv::FileNode::empty": [{"name": "empty", "ret": "retval", "arg": ""}], "cv::HOGDescriptor::compute": [{"name": "compute", "ret": "descriptors", "arg": "img[, winStride[, padding[, locations]]]"}], "cv::ml::SVM::load": [{"name": "SVM_load", "ret": "retval", "arg": "filepath"}], "cv::ml::SVM::getTermCriteria": [{"name": "getTermCriteria", "ret": "retval", "arg": ""}], "cv::dnn::DictValue::isInt": [{"name": "isInt", "ret": "retval", "arg": ""}], "cv::KAZE::setThreshold": [{"name": "setThreshold", "ret": "None", "arg": "threshold"}], "cv::ellipse": [{"name": "ellipse", "ret": "img", "arg": "img, center, axes, angle, startAngle, endAngle, color[, thickness[, lineType[, shift]]]"}, {"name": "ellipse", "ret": "img", "arg": "img, box, color[, thickness[, lineType]]"}], "cv::Feature2D::descriptorType": [{"name": "descriptorType", "ret": "retval", "arg": ""}], "cv::eigen": [{"name": "eigen", "ret": "retval, eigenvalues, eigenvectors", "arg": "src[, eigenvalues[, eigenvectors]]"}], "cv::ml::RTrees::getVotes": [{"name": "getVotes", "ret": "results", "arg": "samples, flags[, results]"}], "cv::createAffineTransformer": [{"name": "createAffineTransformer", "ret": "retval", "arg": "fullAffine"}], "cv::BackgroundSubtractorKNN::setShadowThreshold": [{"name": "setShadowThreshold", "ret": "None", "arg": "threshold"}], "cv::AgastFeatureDetector::create": [{"name": "AgastFeatureDetector_create", "ret": "retval", "arg": "[, threshold[, nonmaxSuppression[, type]]]"}], "cv::Subdiv2D::insert": [{"name": "insert", "ret": "retval", "arg": "pt"}, {"name": "insert", "ret": "None", "arg": "ptvec"}], "cv::perspectiveTransform": [{"name": "perspectiveTransform", "ret": "dst", "arg": "src, m[, dst]"}], "cv::fisheye::undistortImage": [{"name": "undistortImage", "ret": "undistorted", "arg": "distorted, K, D[, undistorted[, Knew[, new_size]]]"}], "cv::FileNode::isNone": [{"name": "isNone", "ret": "retval", "arg": ""}], "cv::BOWTrainer::descriptorsCount": [{"name": "descriptorsCount", "ret": "retval", "arg": ""}], "cv::createThinPlateSplineShapeTransformer": [{"name": "createThinPlateSplineShapeTransformer", "ret": "retval", "arg": "[, regularizationParameter]"}], "cv::MSER::create": [{"name": "MSER_create", "ret": "retval", "arg": "[, _delta[, _min_area[, _max_area[, _max_variation[, _min_diversity[, _max_evolution[, _area_threshold[, _min_margin[, _edge_blur_size]]]]]]]]]"}], "cv::gemm": [{"name": "gemm", "ret": "dst", "arg": "src1, src2, alpha, src3, beta[, dst[, flags]]"}], "cv::destroyAllWindows": [{"name": "destroyAllWindows", "ret": "None", "arg": ""}], "cv::AlignMTB::getCut": [{"name": "getCut", "ret": "retval", "arg": ""}], "cv::ml::ANN_MLP::setRpropDWMin": [{"name": "setRpropDWMin", "ret": "None", "arg": "val"}], "cv::decomposeEssentialMat": [{"name": "decomposeEssentialMat", "ret": "R1, R2, t", "arg": "E[, R1[, R2[, t]]]"}], "cv::createOptFlow_DualTVL1": [{"name": "createOptFlow_DualTVL1", "ret": "retval", "arg": ""}], "cv::FileNode::cv::FileNode::FileNode": [{"name": "FileNode", "ret": "<FileNode object>", "arg": ""}], "cv::KeyPoint::overlap": [{"name": "KeyPoint_overlap", "ret": "retval", "arg": "kp1, kp2"}], "cv::MergeMertens::setSaturationWeight": [{"name": "setSaturationWeight", "ret": "None", "arg": "saturation_weight"}], "cv::TonemapDrago::getSaturation": [{"name": "getSaturation", "ret": "retval", "arg": ""}], "cv::GFTTDetector::getHarrisDetector": [{"name": "getHarrisDetector", "ret": "retval", "arg": ""}], "cv::hconcat": [{"name": "hconcat", "ret": "dst", "arg": "src[, dst]"}], "cv::ml::DTrees::setMaxDepth": [{"name": "setMaxDepth", "ret": "None", "arg": "val"}], "cv::ShapeContextDistanceExtractor::getCostExtractor": [{"name": "getCostExtractor", "ret": "retval", "arg": ""}], "cv::ml::TrainData::getTestResponses": [{"name": "getTestResponses", "ret": "retval", "arg": ""}], "cv::StereoBM::getPreFilterCap": [{"name": "getPreFilterCap", "ret": "retval", "arg": ""}], "cv::Tonemap::getGamma": [{"name": "getGamma", "ret": "retval", "arg": ""}], "cv::pyrMeanShiftFiltering": [{"name": "pyrMeanShiftFiltering", "ret": "dst", "arg": "src, sp, sr[, dst[, maxLevel[, termcrit]]]"}], "cv::VideoCapture::retrieve": [{"name": "retrieve", "ret": "retval, image", "arg": "[, image[, flag]]"}], "cv::ml::Boost::getWeakCount": [{"name": "getWeakCount", "ret": "retval", "arg": ""}], "cv::CLAHE::setClipLimit": [{"name": "setClipLimit", "ret": "None", "arg": "clipLimit"}], "cv::Stitcher::setWaveCorrection": [{"name": "setWaveCorrection", "ret": "None", "arg": "flag"}], "cv::flip": [{"name": "flip", "ret": "dst", "arg": "src, flipCode[, dst]"}], "cv::SimpleBlobDetector::Params::cv::SimpleBlobDetector::Params::Params": [{"name": "SimpleBlobDetector_Params", "ret": "<SimpleBlobDetector_Params object>", "arg": ""}], "cv::pyrUp": [{"name": "pyrUp", "ret": "dst", "arg": "src[, dst[, dstsize[, borderType]]]"}], "cv::ml::SVMSGD::getStepDecreasingPower": [{"name": "getStepDecreasingPower", "ret": "retval", "arg": ""}], "cv::ml::DTrees::setUseSurrogates": [{"name": "setUseSurrogates", "ret": "None", "arg": "val"}], "cv::rotatedRectangleIntersection": [{"name": "rotatedRectangleIntersection", "ret": "retval, intersectingRegion", "arg": "rect1, rect2[, intersectingRegion]"}], "cv::ThinPlateSplineShapeTransformer::getRegularizationParameter": [{"name": "getRegularizationParameter", "ret": "retval", "arg": ""}], "cv::FarnebackOpticalFlow::getNumIters": [{"name": "getNumIters", "ret": "retval", "arg": ""}], "cv::eigenNonSymmetric": [{"name": "eigenNonSymmetric", "ret": "eigenvalues, eigenvectors", "arg": "src[, eigenvalues[, eigenvectors]]"}], "cv::estimateAffine3D": [{"name": "estimateAffine3D", "ret": "retval, out, inliers", "arg": "src, dst[, out[, inliers[, ransacThreshold[, confidence]]]]"}], "cv::patchNaNs": [{"name": "patchNaNs", "ret": "a", "arg": "a[, val]"}], "cv::ml::SVM::setDegree": [{"name": "setDegree", "ret": "None", "arg": "val"}], "cv::ml::RTrees::getVarImportance": [{"name": "getVarImportance", "ret": "retval", "arg": ""}], "cv::norm": [{"name": "norm", "ret": "retval", "arg": "src1[, normType[, mask]]"}, {"name": "norm", "ret": "retval", "arg": "src1, src2[, normType[, mask]]"}], "cv::AKAZE::getDescriptorType": [{"name": "getDescriptorType", "ret": "retval", "arg": ""}], "cv::Subdiv2D::getVoronoiFacetList": [{"name": "getVoronoiFacetList", "ret": "facetList, facetCenters", "arg": "idx"}], "cv::logPolar": [{"name": "logPolar", "ret": "dst", "arg": "src, center, M, flags[, dst]"}], "cv::HistogramCostExtractor::getNDummies": [{"name": "getNDummies", "ret": "retval", "arg": ""}], "cv::integral": [{"name": "integral", "ret": "sum", "arg": "src[, sum[, sdepth]]"}, {"name": "integral2", "ret": "sum, sqsum", "arg": "src[, sum[, sqsum[, sdepth[, sqdepth]]]]"}, {"name": "integral3", "ret": "sum, sqsum, tilted", "arg": "src[, sum[, sqsum[, tilted[, sdepth[, sqdepth]]]]]"}], "cv::Subdiv2D::getEdge": [{"name": "getEdge", "ret": "retval", "arg": "edge, nextEdgeType"}], "cv::bitwise_or": [{"name": "bitwise_or", "ret": "dst", "arg": "src1, src2[, dst[, mask]]"}], "cv::PSNR": [{"name": "PSNR", "ret": "retval", "arg": "src1, src2"}], "cv::spatialGradient": [{"name": "spatialGradient", "ret": "dx, dy", "arg": "src[, dx[, dy[, ksize[, borderType]]]]"}], "cv::ipp::setUseIPP": [{"name": "setUseIPP", "ret": "None", "arg": "flag"}], "cv::ml::RTrees::cv::ml::RTrees::create": [{"name": "create", "ret": "retval", "arg": ""}], "cv::StereoBM::create": [{"name": "StereoBM_create", "ret": "retval", "arg": "[, numDisparities[, blockSize]]"}], "cv::StereoSGBM::getPreFilterCap": [{"name": "getPreFilterCap", "ret": "retval", "arg": ""}], "cv::ShapeContextDistanceExtractor::setRotationInvariant": [{"name": "setRotationInvariant", "ret": "None", "arg": "rotationInvariant"}], "cv::createMergeDebevec": [{"name": "createMergeDebevec", "ret": "retval", "arg": ""}], "cv::ml::EM::getCovarianceMatrixType": [{"name": "getCovarianceMatrixType", "ret": "retval", "arg": ""}], "cv::Feature2D::compute": [{"name": "compute", "ret": "keypoints, descriptors", "arg": "image, keypoints[, descriptors]"}, {"name": "compute", "ret": "keypoints, descriptors", "arg": "images, keypoints[, descriptors]"}], "cv::ml::ANN_MLP::setTermCriteria": [{"name": "setTermCriteria", "ret": "None", "arg": "val"}], "cv::kmeans": [{"name": "kmeans", "ret": "retval, bestLabels, centers", "arg": "data, K, bestLabels, criteria, attempts, flags[, centers]"}], "cv::BOWImgDescriptorExtractor::descriptorType": [{"name": "descriptorType", "ret": "retval", "arg": ""}], "cv::StereoBM::getUniquenessRatio": [{"name": "getUniquenessRatio", "ret": "retval", "arg": ""}], "cv::determinant": [{"name": "determinant", "ret": "retval", "arg": "mtx"}], "cv::HuMoments": [{"name": "HuMoments", "ret": "hu", "arg": "m[, hu]"}], "cv::VideoCapture::isOpened": [{"name": "isOpened", "ret": "retval", "arg": ""}], "cv::convertPointsFromHomogeneous": [{"name": "convertPointsFromHomogeneous", "ret": "dst", "arg": "src[, dst]"}], "cv::dnn::Net::getPerfProfile": [{"name": "getPerfProfile", "ret": "retval, timings", "arg": ""}], "cv::createTonemapMantiuk": [{"name": "createTonemapMantiuk", "ret": "retval", "arg": "[, gamma[, scale[, saturation]]]"}], "cv::calcOpticalFlowPyrLK": [{"name": "calcOpticalFlowPyrLK", "ret": "nextPts, status, err", "arg": "prevImg, nextImg, prevPts, nextPts[, status[, err[, winSize[, maxLevel[, criteria[, flags[, minEigThreshold]]]]]]]"}], "cv::fitEllipse": [{"name": "fitEllipse", "ret": "retval", "arg": "points"}], "cv::MSER::setDelta": [{"name": "setDelta", "ret": "None", "arg": "delta"}], "cv::dnn::DictValue::isString": [{"name": "isString", "ret": "retval", "arg": ""}], "cv::ORB::getWTA_K": [{"name": "getWTA_K", "ret": "retval", "arg": ""}], "cv::GFTTDetector::setMinDistance": [{"name": "setMinDistance", "ret": "None", "arg": "minDistance"}], "cv::DualTVL1OpticalFlow::getWarpingsNumber": [{"name": "getWarpingsNumber", "ret": "retval", "arg": ""}], "cv::reduce": [{"name": "reduce", "ret": "dst", "arg": "src, dim, rtype[, dst[, dtype]]"}], "cv::dft": [{"name": "dft", "ret": "dst", "arg": "src[, dst[, flags[, nonzeroRows]]]"}], "cv::ml::ANN_MLP::getRpropDWMin": [{"name": "getRpropDWMin", "ret": "retval", "arg": ""}], "cv::StereoMatcher::getBlockSize": [{"name": "getBlockSize", "ret": "retval", "arg": ""}], "cv::stereoRectifyUncalibrated": [{"name": "stereoRectifyUncalibrated", "ret": "retval, H1, H2", "arg": "points1, points2, F, imgSize[, H1[, H2[, threshold]]]"}], "cv::FileNode::isNamed": [{"name": "isNamed", "ret": "retval", "arg": ""}], "cv::BackgroundSubtractorMOG2::getShadowThreshold": [{"name": "getShadowThreshold", "ret": "retval", "arg": ""}], "cv::cornerSubPix": [{"name": "cornerSubPix", "ret": "corners", "arg": "image, corners, winSize, zeroZone, criteria"}], "cv::ShapeContextDistanceExtractor::getImages": [{"name": "getImages", "ret": "image1, image2", "arg": "[, image1[, image2]]"}], "cv::illuminationChange": [{"name": "illuminationChange", "ret": "dst", "arg": "src, mask[, dst[, alpha[, beta]]]"}], "cv::multiply": [{"name": "multiply", "ret": "dst", "arg": "src1, src2[, dst[, scale[, dtype]]]"}], "cv::ml::TrainData::getVarIdx": [{"name": "getVarIdx", "ret": "retval", "arg": ""}], "cv::BOWImgDescriptorExtractor::setVocabulary": [{"name": "setVocabulary", "ret": "None", "arg": "vocabulary"}], "cv::VideoCapture::set": [{"name": "set", "ret": "retval", "arg": "propId, value"}], "cv::extractChannel": [{"name": "extractChannel", "ret": "dst", "arg": "src, coi[, dst]"}], "cv::ShapeContextDistanceExtractor::setShapeContextWeight": [{"name": "setShapeContextWeight", "ret": "None", "arg": "shapeContextWeight"}], "cv::ml::StatModel::isClassifier": [{"name": "isClassifier", "ret": "retval", "arg": ""}], "cv::HausdorffDistanceExtractor::getDistanceFlag": [{"name": "getDistanceFlag", "ret": "retval", "arg": ""}], "cv::createBackgroundSubtractorKNN": [{"name": "createBackgroundSubtractorKNN", "ret": "retval", "arg": "[, history[, dist2Threshold[, detectShadows]]]"}], "cv::dnn::Net::getLayerTypes": [{"name": "getLayerTypes", "ret": "layersTypes", "arg": ""}], "cv::ORB::getFirstLevel": [{"name": "getFirstLevel", "ret": "retval", "arg": ""}], "cv::StereoMatcher::getNumDisparities": [{"name": "getNumDisparities", "ret": "retval", "arg": ""}], "cv::FarnebackOpticalFlow::getFlags": [{"name": "getFlags", "ret": "retval", "arg": ""}], "cv::Subdiv2D::locate": [{"name": "locate", "ret": "retval, edge, vertex", "arg": "pt"}], "cv::getStructuringElement": [{"name": "getStructuringElement", "ret": "retval", "arg": "shape, ksize[, anchor]"}], "cv::mean": [{"name": "mean", "ret": "retval", "arg": "src[, mask]"}], "cv::createTonemap": [{"name": "createTonemap", "ret": "retval", "arg": "[, gamma]"}], "cv::FastFeatureDetector::setNonmaxSuppression": [{"name": "setNonmaxSuppression", "ret": "None", "arg": "f"}], "cv::BackgroundSubtractorMOG2::getVarInit": [{"name": "getVarInit", "ret": "retval", "arg": ""}], "cv::cornerEigenValsAndVecs": [{"name": "cornerEigenValsAndVecs", "ret": "dst", "arg": "src, blockSize, ksize[, dst[, borderType]]"}], "cv::ShapeContextDistanceExtractor::setStdDev": [{"name": "setStdDev", "ret": "None", "arg": "sigma"}], "cv::BackgroundSubtractorMOG2::setShadowThreshold": [{"name": "setShadowThreshold", "ret": "None", "arg": "threshold"}], "cv::distanceTransform": [{"name": "distanceTransform", "ret": "dst", "arg": "src, distanceType, maskSize[, dst[, dstType]]"}, {"name": "distanceTransformWithLabels", "ret": "dst, labels", "arg": "src, distanceType, maskSize[, dst[, labels[, labelType]]]"}], "cv::createMergeMertens": [{"name": "createMergeMertens", "ret": "retval", "arg": "[, contrast_weight[, saturation_weight[, exposure_weight]]]"}], "cv::ml::TrainData::getTestSampleIdx": [{"name": "getTestSampleIdx", "ret": "retval", "arg": ""}], "cv::CalibrateRobertson::setMaxIter": [{"name": "setMaxIter", "ret": "None", "arg": "max_iter"}], "cv::sort": [{"name": "sort", "ret": "dst", "arg": "src, flags[, dst]"}], "cv::fisheye::calibrate": [{"name": "calibrate", "ret": "retval, K, D, rvecs, tvecs", "arg": "objectPoints, imagePoints, image_size, K, D[, rvecs[, tvecs[, flags[, criteria]]]]"}], "cv::Subdiv2D::getTriangleList": [{"name": "getTriangleList", "ret": "triangleList", "arg": ""}], "cv::completeSymm": [{"name": "completeSymm", "ret": "mtx", "arg": "mtx[, lowerToUpper]"}], "cv::ml::SVMSGD::getInitialStepSize": [{"name": "getInitialStepSize", "ret": "retval", "arg": ""}], "cv::CLAHE::collectGarbage": [{"name": "collectGarbage", "ret": "None", "arg": ""}], "cv::BOWTrainer::add": [{"name": "add", "ret": "None", "arg": "descriptors"}], "cv::ml::LogisticRegression::load": [{"name": "LogisticRegression_load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::randn": [{"name": "randn", "ret": "dst", "arg": "dst, mean, stddev"}], "cv::BackgroundSubtractorKNN::getDist2Threshold": [{"name": "getDist2Threshold", "ret": "retval", "arg": ""}], "cv::ml::KNearest::setDefaultK": [{"name": "setDefaultK", "ret": "None", "arg": "val"}], "cv::Stitcher::workScale": [{"name": "workScale", "ret": "retval", "arg": ""}], "cv::ml::StatModel::empty": [{"name": "empty", "ret": "retval", "arg": ""}], "cv::PCACompute": [{"name": "PCACompute", "ret": "mean, eigenvectors", "arg": "data, mean[, eigenvectors[, maxComponents]]"}, {"name": "PCACompute", "ret": "mean, eigenvectors", "arg": "data, mean, retainedVariance[, eigenvectors]"}], "cv::ml::DTrees::load": [{"name": "DTrees_load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::SparsePyrLKOpticalFlow::getMinEigThreshold": [{"name": "getMinEigThreshold", "ret": "retval", "arg": ""}], "cv::findHomography": [{"name": "findHomography", "ret": "retval, mask", "arg": "srcPoints, dstPoints[, method[, ransacReprojThreshold[, mask[, maxIters[, confidence]]]]]"}], "cv::ml::ANN_MLP::getTrainMethod": [{"name": "getTrainMethod", "ret": "retval", "arg": ""}], "cv::CLAHE::apply": [{"name": "apply", "ret": "dst", "arg": "src[, dst]"}], "cv::BackgroundSubtractorMOG2::getHistory": [{"name": "getHistory", "ret": "retval", "arg": ""}], "cv::ml::DTrees::getRegressionAccuracy": [{"name": "getRegressionAccuracy", "ret": "retval", "arg": ""}], "cv::ml::TrainData::getResponseType": [{"name": "getResponseType", "ret": "retval", "arg": ""}], "cv::ocl::haveAmdBlas": [{"name": "haveAmdBlas", "ret": "retval", "arg": ""}], "cv::AlignMTB::computeBitmaps": [{"name": "computeBitmaps", "ret": "tb, eb", "arg": "img[, tb[, eb]]"}], "cv::ORB::setNLevels": [{"name": "setNLevels", "ret": "None", "arg": "nlevels"}], "cv::imwrite": [{"name": "imwrite", "ret": "retval", "arg": "filename, img[, params]"}], "cv::startWindowThread": [{"name": "startWindowThread", "ret": "retval", "arg": ""}], "cv::invert": [{"name": "invert", "ret": "retval, dst", "arg": "src[, dst[, flags]]"}], "cv::getOptimalNewCameraMatrix": [{"name": "getOptimalNewCameraMatrix", "ret": "retval, validPixROI", "arg": "cameraMatrix, distCoeffs, imageSize, alpha[, newImgSize[, centerPrincipalPoint]]"}], "cv::BackgroundSubtractorMOG2::setNMixtures": [{"name": "setNMixtures", "ret": "None", "arg": "nmixtures"}], "cv::recoverPose": [{"name": "recoverPose", "ret": "retval, R, t, mask", "arg": "E, points1, points2, cameraMatrix[, R[, t[, mask]]]"}, {"name": "recoverPose", "ret": "retval, R, t, mask", "arg": "E, points1, points2[, R[, t[, focal[, pp[, mask]]]]]"}, {"name": "recoverPose", "ret": "retval, R, t, mask, triangulatedPoints", "arg": "E, points1, points2, cameraMatrix, distanceThresh[, R[, t[, mask[, triangulatedPoints]]]]"}], "cv::approxPolyDP": [{"name": "approxPolyDP", "ret": "approxCurve", "arg": "curve, epsilon, closed[, approxCurve]"}], "cv::createEMDL1HistogramCostExtractor": [{"name": "createEMDL1HistogramCostExtractor", "ret": "retval", "arg": "[, nDummies[, defaultCost]]"}], "cv::AlignMTB::getExcludeRange": [{"name": "getExcludeRange", "ret": "retval", "arg": ""}], "cv::TickMeter::reset": [{"name": "reset", "ret": "None", "arg": ""}], "cv::BackgroundSubtractorKNN::getShadowThreshold": [{"name": "getShadowThreshold", "ret": "retval", "arg": ""}], "cv::drawKeypoints": [{"name": "drawKeypoints", "ret": "outImage", "arg": "image, keypoints, outImage[, color[, flags]]"}], "cv::BackgroundSubtractor::apply": [{"name": "apply", "ret": "fgmask", "arg": "image[, fgmask[, learningRate]]"}], "cv::ml::SVMSGD::setStepDecreasingPower": [{"name": "setStepDecreasingPower", "ret": "None", "arg": "stepDecreasingPower"}], "cv::FileStorage::getFormat": [{"name": "getFormat", "ret": "retval", "arg": ""}], "cv::DualTVL1OpticalFlow::getMedianFiltering": [{"name": "getMedianFiltering", "ret": "retval", "arg": ""}], "cv::VideoWriter::write": [{"name": "write", "ret": "None", "arg": "image"}], "cv::dnn::Net::getLayerNames": [{"name": "getLayerNames", "ret": "retval", "arg": ""}], "cv::Sobel": [{"name": "Sobel", "ret": "dst", "arg": "src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]]"}], "cv::ml::StatModel::train": [{"name": "train", "ret": "retval", "arg": "trainData[, flags]"}, {"name": "train", "ret": "retval", "arg": "samples, layout, responses"}], "cv::ml::TrainData::getLayout": [{"name": "getLayout", "ret": "retval", "arg": ""}], "cv::ml::SVM::setNu": [{"name": "setNu", "ret": "None", "arg": "val"}], "cv::FarnebackOpticalFlow::getWinSize": [{"name": "getWinSize", "ret": "retval", "arg": ""}], "cv::meanShift": [{"name": "meanShift", "ret": "retval, window", "arg": "probImage, window, criteria"}], "cv::estimateAffine2D": [{"name": "estimateAffine2D", "ret": "retval, inliers", "arg": "from, to[, inliers[, method[, ransacReprojThreshold[, maxIters[, confidence[, refineIters]]]]]]"}], "cv::ml::SVM::create": [{"name": "SVM_create", "ret": "retval", "arg": ""}], "cv::AgastFeatureDetector::cv::AgastFeatureDetector::create": [{"name": "create", "ret": "retval", "arg": "[, threshold[, nonmaxSuppression[, type]]]"}], "cv::ml::LogisticRegression::predict": [{"name": "predict", "ret": "retval, results", "arg": "samples[, results[, flags]]"}], "cv::ml::SVM::cv::ml::SVM::getDefaultGridPtr": [{"name": "getDefaultGridPtr", "ret": "retval", "arg": "param_id"}], "cv::DualTVL1OpticalFlow::getLambda": [{"name": "getLambda", "ret": "retval", "arg": ""}], "cv::dnn::Net::getParam": [{"name": "getParam", "ret": "retval", "arg": "layer[, numParam]"}], "cv::rotate": [{"name": "rotate", "ret": "dst", "arg": "src, rotateCode[, dst]"}], "cv::ShapeContextDistanceExtractor::getRotationInvariant": [{"name": "getRotationInvariant", "ret": "retval", "arg": ""}], "cv::arrowedLine": [{"name": "arrowedLine", "ret": "img", "arg": "img, pt1, pt2, color[, thickness[, line_type[, shift[, tipLength]]]]"}], "cv::BackgroundSubtractorMOG2::getNMixtures": [{"name": "getNMixtures", "ret": "retval", "arg": ""}], "cv::dnn::Net::getLayersShapes": [{"name": "getLayersShapes", "ret": "layersIds, inLayersShapes, outLayersShapes", "arg": "netInputShapes"}, {"name": "getLayersShapes", "ret": "layersIds, inLayersShapes, outLayersShapes", "arg": "netInputShape"}], "cv::CalibrateDebevec::setRandom": [{"name": "setRandom", "ret": "None", "arg": "random"}], "cv::MSER::setMaxArea": [{"name": "setMaxArea", "ret": "None", "arg": "maxArea"}], "cv::batchDistance": [{"name": "batchDistance", "ret": "dist, nidx", "arg": "src1, src2, dtype[, dist[, nidx[, normType[, K[, mask[, update[, crosscheck]]]]]]]"}], "cv::AKAZE::getDescriptorSize": [{"name": "getDescriptorSize", "ret": "retval", "arg": ""}], "cv::BackgroundSubtractorKNN::setDetectShadows": [{"name": "setDetectShadows", "ret": "None", "arg": "detectShadows"}], "cv::AKAZE::getNOctaves": [{"name": "getNOctaves", "ret": "retval", "arg": ""}], "cv::connectedComponentsWithStats": [{"name": "connectedComponentsWithStats", "ret": "retval, labels, stats, centroids", "arg": "image[, labels[, stats[, centroids[, connectivity[, ltype]]]]]"}, {"name": "connectedComponentsWithStatsWithAlgorithm", "ret": "retval, labels, stats, centroids", "arg": "image, connectivity, ltype, ccltype[, labels[, stats[, centroids]]]"}], "cv::FarnebackOpticalFlow::setFastPyramids": [{"name": "setFastPyramids", "ret": "None", "arg": "fastPyramids"}], "cv::VideoWriter::open": [{"name": "open", "ret": "retval", "arg": "filename, fourcc, fps, frameSize[, isColor]"}, {"name": "open", "ret": "retval", "arg": "filename, apiPreference, fourcc, fps, frameSize[, isColor]"}], "cv::ml::SVM::getGamma": [{"name": "getGamma", "ret": "retval", "arg": ""}], "cv::HOGDescriptor::setSVMDetector": [{"name": "setSVMDetector", "ret": "None", "arg": "_svmdetector"}], "cv::Algorithm::clear": [{"name": "clear", "ret": "None", "arg": ""}], "cv::AKAZE::cv::AKAZE::create": [{"name": "create", "ret": "retval", "arg": "[, descriptor_type[, descriptor_size[, descriptor_channels[, threshold[, nOctaves[, nOctaveLayers[, diffusivity]]]]]]]"}], "cv::FileStorage::operator[]": [{"name": "getNode", "ret": "retval", "arg": "nodename"}], "cv::moments": [{"name": "moments", "ret": "retval", "arg": "array[, binaryImage]"}], "cv::KAZE::cv::KAZE::create": [{"name": "create", "ret": "retval", "arg": "[, extended[, upright[, threshold[, nOctaves[, nOctaveLayers[, diffusivity]]]]]]"}], "cv::ml::TrainData::getResponses": [{"name": "getResponses", "ret": "retval", "arg": ""}], "cv::ml::TrainData::getCatOfs": [{"name": "getCatOfs", "ret": "retval", "arg": ""}], "cv::ml::DTrees::getMaxCategories": [{"name": "getMaxCategories", "ret": "retval", "arg": ""}], "cv::warpAffine": [{"name": "warpAffine", "ret": "dst", "arg": "src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]]"}], "cv::imdecode": [{"name": "imdecode", "ret": "retval", "arg": "buf, flags"}], "cv::ml::TrainData::getNTrainSamples": [{"name": "getNTrainSamples", "ret": "retval", "arg": ""}], "cv::compare": [{"name": "compare", "ret": "dst", "arg": "src1, src2, cmpop[, dst]"}], "cv::DualTVL1OpticalFlow::getGamma": [{"name": "getGamma", "ret": "retval", "arg": ""}], "cv::StereoBM::getROI2": [{"name": "getROI2", "ret": "retval", "arg": ""}], "cv::StereoBM::getROI1": [{"name": "getROI1", "ret": "retval", "arg": ""}], "cv::detailEnhance": [{"name": "detailEnhance", "ret": "dst", "arg": "src[, dst[, sigma_s[, sigma_r]]]"}], "cv::ml::TrainData::getSample": [{"name": "getSample", "ret": "None", "arg": "varIdx, sidx, buf"}], "cv::DescriptorMatcher::empty": [{"name": "empty", "ret": "retval", "arg": ""}], "cv::SimpleBlobDetector::getDefaultName": [{"name": "getDefaultName", "ret": "retval", "arg": ""}], "cv::KeyPoint::cv::KeyPoint::KeyPoint": [{"name": "KeyPoint", "ret": "<KeyPoint object>", "arg": ""}, {"name": "KeyPoint", "ret": "<KeyPoint object>", "arg": "x, y, _size[, _angle[, _response[, _octave[, _class_id]]]]"}], "cv::ml::EM::trainEM": [{"name": "trainEM", "ret": "retval, logLikelihoods, labels, probs", "arg": "samples[, logLikelihoods[, labels[, probs]]]"}], "cv::BackgroundSubtractorMOG2::setVarMin": [{"name": "setVarMin", "ret": "None", "arg": "varMin"}], "cv::DescriptorMatcher::isMaskSupported": [{"name": "isMaskSupported", "ret": "retval", "arg": ""}], "cv::findTransformECC": [{"name": "findTransformECC", "ret": "retval, warpMatrix", "arg": "templateImage, inputImage, warpMatrix[, motionType[, criteria[, inputMask]]]"}], "cv::HOGDescriptor::cv::HOGDescriptor::getDaimlerPeopleDetector": [{"name": "getDaimlerPeopleDetector", "ret": "retval", "arg": ""}], "cv::connectedComponents": [{"name": "connectedComponents", "ret": "retval, labels", "arg": "image[, labels[, connectivity[, ltype]]]"}, {"name": "connectedComponentsWithAlgorithm", "ret": "retval, labels", "arg": "image, connectivity, ltype, ccltype[, labels]"}], "cv::ml::EM::setTermCriteria": [{"name": "setTermCriteria", "ret": "None", "arg": "val"}], "cv::Stitcher::stitch": [{"name": "stitch", "ret": "retval, pano", "arg": "images[, pano]"}], "cv::flann::Index::cv::flann::Index::Index": [{"name": "Index", "ret": "<flann_Index object>", "arg": ""}, {"name": "Index", "ret": "<flann_Index object>", "arg": "features, params[, distType]"}], "cv::Tonemap::process": [{"name": "process", "ret": "dst", "arg": "src[, dst]"}], "cv::calcOpticalFlowFarneback": [{"name": "calcOpticalFlowFarneback", "ret": "flow", "arg": "prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags"}], "cv::CascadeClassifier::empty": [{"name": "empty", "ret": "retval", "arg": ""}], "cv::SparsePyrLKOpticalFlow::getMaxLevel": [{"name": "getMaxLevel", "ret": "retval", "arg": ""}], "cv::Subdiv2D::edgeOrg": [{"name": "edgeOrg", "ret": "retval, orgpt", "arg": "edge"}], "cv::ml::RTrees::setCalculateVarImportance": [{"name": "setCalculateVarImportance", "ret": "None", "arg": "val"}], "cv::GFTTDetector::getMaxFeatures": [{"name": "getMaxFeatures", "ret": "retval", "arg": ""}], "cv::AlignMTB::setExcludeRange": [{"name": "setExcludeRange", "ret": "None", "arg": "exclude_range"}], "cv::convertPointsToHomogeneous": [{"name": "convertPointsToHomogeneous", "ret": "dst", "arg": "src[, dst]"}], "cv::Stitcher::setRegistrationResol": [{"name": "setRegistrationResol", "ret": "None", "arg": "resol_mpx"}], "cv::CalibrateDebevec::getSamples": [{"name": "getSamples", "ret": "retval", "arg": ""}], "cv::getValidDisparityROI": [{"name": "getValidDisparityROI", "ret": "retval", "arg": "roi1, roi2, minDisparity, numberOfDisparities, SADWindowSize"}], "cv::ml::EM::load": [{"name": "EM_load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::ml::TrainData::getSampleWeights": [{"name": "getSampleWeights", "ret": "retval", "arg": ""}], "cv::ShapeContextDistanceExtractor::getInnerRadius": [{"name": "getInnerRadius", "ret": "retval", "arg": ""}], "cv::sepFilter2D": [{"name": "sepFilter2D", "ret": "dst", "arg": "src, ddepth, kernelX, kernelY[, dst[, anchor[, delta[, borderType]]]]"}], "cv::MergeMertens::process": [{"name": "process", "ret": "dst", "arg": "src, times, response[, dst]"}, {"name": "process", "ret": "dst", "arg": "src[, dst]"}], "cv::merge": [{"name": "merge", "ret": "dst", "arg": "mv[, dst]"}], "cv::CLAHE::getTilesGridSize": [{"name": "getTilesGridSize", "ret": "retval", "arg": ""}], "cv::StereoSGBM::getP1": [{"name": "getP1", "ret": "retval", "arg": ""}], "cv::CalibrateRobertson::setThreshold": [{"name": "setThreshold", "ret": "None", "arg": "threshold"}], "cv::rectify3Collinear": [{"name": "rectify3Collinear", "ret": "retval, R1, R2, R3, P1, P2, P3, Q, roi1, roi2", "arg": "cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, cameraMatrix3, distCoeffs3, imgpt1, imgpt3, imageSize, R12, T12, R13, T13, alpha, newImgSize, flags[, R1[, R2[, R3[, P1[, P2[, P3[, Q]]]]]]]"}], "cv::EMDHistogramCostExtractor::setNormFlag": [{"name": "setNormFlag", "ret": "None", "arg": "flag"}], "cv::BackgroundSubtractorMOG2::getVarMin": [{"name": "getVarMin", "ret": "retval", "arg": ""}], "cv::mulTransposed": [{"name": "mulTransposed", "ret": "dst", "arg": "src, aTa[, dst[, delta[, scale[, dtype]]]]"}], "cv::KAZE::setUpright": [{"name": "setUpright", "ret": "None", "arg": "upright"}], "cv::TickMeter::getTimeMicro": [{"name": "getTimeMicro", "ret": "retval", "arg": ""}], "cv::ml::TrainData::getDefaultSubstValues": [{"name": "getDefaultSubstValues", "ret": "retval", "arg": ""}], "cv::ml::RTrees::setTermCriteria": [{"name": "setTermCriteria", "ret": "None", "arg": "val"}], "cv::borderInterpolate": [{"name": "borderInterpolate", "ret": "retval", "arg": "p, len, borderType"}], "cv::convexityDefects": [{"name": "convexityDefects", "ret": "convexityDefects", "arg": "contour, convexhull[, convexityDefects]"}], "cv::FileNode::operator[]": [{"name": "at", "ret": "retval", "arg": "i"}, {"name": "getNode", "ret": "retval", "arg": "nodename"}], "cv::drawMatches": [{"name": "drawMatches", "ret": "outImg", "arg": "img1, keypoints1, img2, keypoints2, matches1to2, outImg[, matchColor[, singlePointColor[, matchesMask[, flags]]]]"}, {"name": "drawMatchesKnn", "ret": "outImg", "arg": "img1, keypoints1, img2, keypoints2, matches1to2, outImg[, matchColor[, singlePointColor[, matchesMask[, flags]]]]"}], "cv::DualTVL1OpticalFlow::setScaleStep": [{"name": "setScaleStep", "ret": "None", "arg": "val"}], "cv::ml::KNearest::create": [{"name": "KNearest_create", "ret": "retval", "arg": ""}], "cv::undistortPoints": [{"name": "undistortPoints", "ret": "dst", "arg": "src, cameraMatrix, distCoeffs[, dst[, R[, P]]]"}, {"name": "undistortPointsIter", "ret": "dst", "arg": "src, cameraMatrix, distCoeffs, R, P, criteria[, dst]"}], "cv::phaseCorrelate": [{"name": "phaseCorrelate", "ret": "retval, response", "arg": "src1, src2[, window]"}], "cv::goodFeaturesToTrack": [{"name": "goodFeaturesToTrack", "ret": "corners", "arg": "image, maxCorners, qualityLevel, minDistance[, corners[, mask[, blockSize[, useHarrisDetector[, k]]]]]"}, {"name": "goodFeaturesToTrack", "ret": "corners", "arg": "image, maxCorners, qualityLevel, minDistance, mask, blockSize, gradientSize[, corners[, useHarrisDetector[, k]]]"}], "cv::matMulDeriv": [{"name": "matMulDeriv", "ret": "dABdA, dABdB", "arg": "A, B[, dABdA[, dABdB]]"}], "cv::ml::TrainData::getMissing": [{"name": "getMissing", "ret": "retval", "arg": ""}], "cv::getCPUTickCount": [{"name": "getCPUTickCount", "ret": "retval", "arg": ""}], "cv::ml::TrainData::getTrainSampleWeights": [{"name": "getTrainSampleWeights", "ret": "retval", "arg": ""}], "cv::log": [{"name": "log", "ret": "dst", "arg": "src[, dst]"}], "cv::fitEllipseAMS": [{"name": "fitEllipseAMS", "ret": "retval", "arg": "points"}], "cv::ShapeTransformer::warpImage": [{"name": "warpImage", "ret": "output", "arg": "transformingImage[, output[, flags[, borderMode[, borderValue]]]]"}], "cv::DualTVL1OpticalFlow::setOuterIterations": [{"name": "setOuterIterations", "ret": "None", "arg": "val"}], "cv::KeyPoint::convert": [{"name": "KeyPoint_convert", "ret": "points2f", "arg": "keypoints[, keypointIndexes]"}, {"name": "KeyPoint_convert", "ret": "keypoints", "arg": "points2f[, size[, response[, octave[, class_id]]]]"}], "cv::ml::DTrees::getUse1SERule": [{"name": "getUse1SERule", "ret": "retval", "arg": ""}], "cv::ml::ParamGrid::create": [{"name": "ParamGrid_create", "ret": "retval", "arg": "[, minVal[, maxVal[, logstep]]]"}], "cv::polarToCart": [{"name": "polarToCart", "ret": "x, y", "arg": "magnitude, angle[, x[, y[, angleInDegrees]]]"}], "cv::AKAZE::getDefaultName": [{"name": "getDefaultName", "ret": "retval", "arg": ""}], "cv::demosaicing": [{"name": "demosaicing", "ret": "_dst", "arg": "_src, code[, _dst[, dcn]]"}], "cv::waitKey": [{"name": "waitKey", "ret": "retval", "arg": "[, delay]"}], "cv::ml::DTrees::setUse1SERule": [{"name": "setUse1SERule", "ret": "None", "arg": "val"}], "cv::minMaxLoc": [{"name": "minMaxLoc", "ret": "minVal, maxVal, minLoc, maxLoc", "arg": "src[, mask]"}], "cv::dnn::Net::connect": [{"name": "connect", "ret": "None", "arg": "outPin, inpPin"}], "cv::ml::DTrees::cv::ml::DTrees::create": [{"name": "create", "ret": "retval", "arg": ""}], "cv::Stitcher::panoConfidenceThresh": [{"name": "panoConfidenceThresh", "ret": "retval", "arg": ""}], "cv::ml::SVMSGD::getSvmsgdType": [{"name": "getSvmsgdType", "ret": "retval", "arg": ""}], "cv::ml::SVM::cv::ml::SVM::load": [{"name": "load", "ret": "retval", "arg": "filepath"}], "cv::FarnebackOpticalFlow::setFlags": [{"name": "setFlags", "ret": "None", "arg": "flags"}], "cv::ml::RTrees::setActiveVarCount": [{"name": "setActiveVarCount", "ret": "None", "arg": "val"}], "cv::destroyWindow": [{"name": "destroyWindow", "ret": "None", "arg": "winname"}], "cv::GFTTDetector::getBlockSize": [{"name": "getBlockSize", "ret": "retval", "arg": ""}], "cv::DualTVL1OpticalFlow::getTau": [{"name": "getTau", "ret": "retval", "arg": ""}], "cv::ml::SVM::setC": [{"name": "setC", "ret": "None", "arg": "val"}], "cv::solvePoly": [{"name": "solvePoly", "ret": "retval, roots", "arg": "coeffs[, roots[, maxIters]]"}], "cv::AgastFeatureDetector::getType": [{"name": "getType", "ret": "retval", "arg": ""}], "cv::HistogramCostExtractor::setNDummies": [{"name": "setNDummies", "ret": "None", "arg": "nDummies"}], "cv::ocl::useOpenCL": [{"name": "useOpenCL", "ret": "retval", "arg": ""}], "cv::AlignExposures::process": [{"name": "process", "ret": "None", "arg": "src, dst, times, response"}], "cv::BackgroundSubtractorKNN::setHistory": [{"name": "setHistory", "ret": "None", "arg": "history"}], "cv::BackgroundSubtractorMOG2::setDetectShadows": [{"name": "setDetectShadows", "ret": "None", "arg": "detectShadows"}], "cv::FileNode::isSeq": [{"name": "isSeq", "ret": "retval", "arg": ""}], "cv::ml::TrainData::getTrainSamples": [{"name": "getTrainSamples", "ret": "retval", "arg": "[, layout[, compressSamples[, compressVars]]]"}], "cv::ml::TrainData::getValues": [{"name": "getValues", "ret": "None", "arg": "vi, sidx, values"}], "cv::ml::TrainData::getTestNormCatResponses": [{"name": "getTestNormCatResponses", "ret": "retval", "arg": ""}], "cv::CascadeClassifier::load": [{"name": "load", "ret": "retval", "arg": "filename"}], "cv::StereoMatcher::setSpeckleWindowSize": [{"name": "setSpeckleWindowSize", "ret": "None", "arg": "speckleWindowSize"}], "cv::CLAHE::setTilesGridSize": [{"name": "setTilesGridSize", "ret": "None", "arg": "tileGridSize"}], "cv::ml::EM::getMeans": [{"name": "getMeans", "ret": "retval", "arg": ""}], "cv::TonemapDurand::setContrast": [{"name": "setContrast", "ret": "None", "arg": "contrast"}], "cv::DualTVL1OpticalFlow::getEpsilon": [{"name": "getEpsilon", "ret": "retval", "arg": ""}], "cv::ShapeContextDistanceExtractor::setTransformAlgorithm": [{"name": "setTransformAlgorithm", "ret": "None", "arg": "transformer"}], "cv::StereoSGBM::getMode": [{"name": "getMode", "ret": "retval", "arg": ""}], "cv::FarnebackOpticalFlow::getFastPyramids": [{"name": "getFastPyramids", "ret": "retval", "arg": ""}], "cv::ml::SVM::getDecisionFunction": [{"name": "getDecisionFunction", "ret": "retval, alpha, svidx", "arg": "i[, alpha[, svidx]]"}], "cv::VideoWriter::isOpened": [{"name": "isOpened", "ret": "retval", "arg": ""}], "cv::AlignMTB::calculateShift": [{"name": "calculateShift", "ret": "retval", "arg": "img0, img1"}], "cv::solvePnPRansac": [{"name": "solvePnPRansac", "ret": "retval, rvec, tvec, inliers", "arg": "objectPoints, imagePoints, cameraMatrix, distCoeffs[, rvec[, tvec[, useExtrinsicGuess[, iterationsCount[, reprojectionError[, confidence[, inliers[, flags]]]]]]]]"}], "cv::DualTVL1OpticalFlow::setEpsilon": [{"name": "setEpsilon", "ret": "None", "arg": "val"}], "cv::FileNode::size": [{"name": "size", "ret": "retval", "arg": ""}], "cv::VideoCapture::grab": [{"name": "grab", "ret": "retval", "arg": ""}], "cv::imreadmulti": [{"name": "imreadmulti", "ret": "retval, mats", "arg": "filename[, mats[, flags]]"}], "cv::Subdiv2D::findNearest": [{"name": "findNearest", "ret": "retval, nearestPt", "arg": "pt"}], "cv::ml::TrainData::setTrainTestSplit": [{"name": "setTrainTestSplit", "ret": "None", "arg": "count[, shuffle]"}], "cv::DualTVL1OpticalFlow::getUseInitialFlow": [{"name": "getUseInitialFlow", "ret": "retval", "arg": ""}], "cv::BFMatcher::cv::BFMatcher::BFMatcher": [{"name": "BFMatcher", "ret": "<BFMatcher object>", "arg": "[, normType[, crossCheck]]"}], "cv::AlignMTB::setCut": [{"name": "setCut", "ret": "None", "arg": "value"}], "cv::reprojectImageTo3D": [{"name": "reprojectImageTo3D", "ret": "_3dImage", "arg": "disparity, Q[, _3dImage[, handleMissingValues[, ddepth]]]"}], "cv::Subdiv2D::getLeadingEdgeList": [{"name": "getLeadingEdgeList", "ret": "leadingEdgeList", "arg": ""}], "cv::VideoCapture::read": [{"name": "read", "ret": "retval, image", "arg": "[, image]"}], "cv::meanStdDev": [{"name": "meanStdDev", "ret": "mean, stddev", "arg": "src[, mean[, stddev[, mask]]]"}], "cv::ml::EM::predict": [{"name": "predict", "ret": "retval, results", "arg": "samples[, results[, flags]]"}], "cv::Subdiv2D::edgeDst": [{"name": "edgeDst", "ret": "retval, dstpt", "arg": "edge"}], "cv::getThreadNum": [{"name": "getThreadNum", "ret": "retval", "arg": ""}], "cv::DualTVL1OpticalFlow::getTheta": [{"name": "getTheta", "ret": "retval", "arg": ""}], "cv::TonemapDurand::getContrast": [{"name": "getContrast", "ret": "retval", "arg": ""}], "cv::convertMaps": [{"name": "convertMaps", "ret": "dstmap1, dstmap2", "arg": "map1, map2, dstmap1type[, dstmap1[, dstmap2[, nninterpolation]]]"}], "cv::FlannBasedMatcher::cv::FlannBasedMatcher::FlannBasedMatcher": [{"name": "FlannBasedMatcher", "ret": "<FlannBasedMatcher object>", "arg": "[, indexParams[, searchParams]]"}], "cv::StereoMatcher::setBlockSize": [{"name": "setBlockSize", "ret": "None", "arg": "blockSize"}], "cv::dnn::blobFromImage": [{"name": "blobFromImage", "ret": "retval", "arg": "image[, scalefactor[, size[, mean[, swapRB[, crop]]]]]"}], "cv::KAZE::setExtended": [{"name": "setExtended", "ret": "None", "arg": "extended"}], "cv::triangulatePoints": [{"name": "triangulatePoints", "ret": "points4D", "arg": "projMatr1, projMatr2, projPoints1, projPoints2[, points4D]"}], "cv::Stitcher::seamEstimationResol": [{"name": "seamEstimationResol", "ret": "retval", "arg": ""}], "cv::DescriptorMatcher::write": [{"name": "write", "ret": "None", "arg": "fileName"}], "cv::ml::RTrees::getActiveVarCount": [{"name": "getActiveVarCount", "ret": "retval", "arg": ""}], "cv::ml::KNearest::getEmax": [{"name": "getEmax", "ret": "retval", "arg": ""}], "cv::CascadeClassifier::cv::CascadeClassifier::CascadeClassifier": [{"name": "CascadeClassifier", "ret": "<CascadeClassifier object>", "arg": ""}, {"name": "CascadeClassifier", "ret": "<CascadeClassifier object>", "arg": "filename"}], "cv::createHausdorffDistanceExtractor": [{"name": "createHausdorffDistanceExtractor", "ret": "retval", "arg": "[, distanceFlag[, rankProp]]"}], "cv::HOGDescriptor::getDaimlerPeopleDetector": [{"name": "HOGDescriptor_getDaimlerPeopleDetector", "ret": "retval", "arg": ""}], "cv::denoise_TVL1": [{"name": "denoise_TVL1", "ret": "None", "arg": "observations, result[, lambda[, niters]]"}], "cv::ml::DTrees::setMaxCategories": [{"name": "setMaxCategories", "ret": "None", "arg": "val"}], "cv::FarnebackOpticalFlow::getPolyN": [{"name": "getPolyN", "ret": "retval", "arg": ""}], "cv::StereoSGBM::setUniquenessRatio": [{"name": "setUniquenessRatio", "ret": "None", "arg": "uniquenessRatio"}], "cv::selectROIs": [{"name": "selectROIs", "ret": "boundingBoxes", "arg": "windowName, img[, showCrosshair[, fromCenter]]"}], "cv::ml::SVM::getKernelType": [{"name": "getKernelType", "ret": "retval", "arg": ""}], "cv::ml::StatModel::calcError": [{"name": "calcError", "ret": "retval, resp", "arg": "data, test[, resp]"}], "cv::ml::ANN_MLP::getRpropDWPlus": [{"name": "getRpropDWPlus", "ret": "retval", "arg": ""}], "cv::putText": [{"name": "putText", "ret": "img", "arg": "img, text, org, fontFace, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]]"}], "cv::ml::TrainData::getTestSamples": [{"name": "getTestSamples", "ret": "retval", "arg": ""}], "cv::ml::ANN_MLP::getRpropDWMax": [{"name": "getRpropDWMax", "ret": "retval", "arg": ""}], "cv::flann::Index::release": [{"name": "release", "ret": "None", "arg": ""}], "cv::sampsonDistance": [{"name": "sampsonDistance", "ret": "retval", "arg": "pt1, pt2, F"}], "cv::MergeMertens::setContrastWeight": [{"name": "setContrastWeight", "ret": "None", "arg": "contrast_weiht"}], "cv::StereoSGBM::setP2": [{"name": "setP2", "ret": "None", "arg": "P2"}], "cv::AlignMTB::setMaxBits": [{"name": "setMaxBits", "ret": "None", "arg": "max_bits"}], "cv::ml::TrainData::cv::ml::TrainData::create": [{"name": "create", "ret": "retval", "arg": "samples, layout, responses[, varIdx[, sampleIdx[, sampleWeights[, varType]]]]"}], "cv::mulSpectrums": [{"name": "mulSpectrums", "ret": "c", "arg": "a, b, flags[, c[, conjB]]"}], "cv::dnn::Net::getLayersCount": [{"name": "getLayersCount", "ret": "retval", "arg": "layerType"}], "cv::polylines": [{"name": "polylines", "ret": "img", "arg": "img, pts, isClosed, color[, thickness[, lineType[, shift]]]"}], "cv::Scharr": [{"name": "Scharr", "ret": "dst", "arg": "src, ddepth, dx, dy[, dst[, scale[, delta[, borderType]]]]"}], "cv::ml::Boost::getBoostType": [{"name": "getBoostType", "ret": "retval", "arg": ""}], "cv::Subdiv2D::rotateEdge": [{"name": "rotateEdge", "ret": "retval", "arg": "edge, rotate"}], "cv::ml::ANN_MLP::getRpropDW0": [{"name": "getRpropDW0", "ret": "retval", "arg": ""}], "cv::BackgroundSubtractorKNN::getShadowValue": [{"name": "getShadowValue", "ret": "retval", "arg": ""}], "cv::MSER::cv::MSER::create": [{"name": "create", "ret": "retval", "arg": "[, _delta[, _min_area[, _max_area[, _max_variation[, _min_diversity[, _max_evolution[, _area_threshold[, _min_margin[, _edge_blur_size]]]]]]]]]"}], "cv::FastFeatureDetector::getThreshold": [{"name": "getThreshold", "ret": "retval", "arg": ""}], "cv::ml::KNearest::findNearest": [{"name": "findNearest", "ret": "retval, results, neighborResponses, dist", "arg": "samples, k[, results[, neighborResponses[, dist]]]"}], "cv::findContours": [{"name": "findContours", "ret": "image, contours, hierarchy", "arg": "image, mode, method[, contours[, hierarchy[, offset]]]"}], "cv::StereoSGBM::create": [{"name": "StereoSGBM_create", "ret": "retval", "arg": "[, minDisparity[, numDisparities[, blockSize[, P1[, P2[, disp12MaxDiff[, preFilterCap[, uniquenessRatio[, speckleWindowSize[, speckleRange[, mode]]]]]]]]]]]"}], "cv::AKAZE::setNOctaves": [{"name": "setNOctaves", "ret": "None", "arg": "octaves"}], "cv::ml::TrainData::getNAllVars": [{"name": "getNAllVars", "ret": "retval", "arg": ""}], "cv::Stitcher::composePanorama": [{"name": "composePanorama", "ret": "retval, pano", "arg": "[, pano]"}], "cv::ml::SVMSGD::getShift": [{"name": "getShift", "ret": "retval", "arg": ""}], "cv::FileNode::real": [{"name": "real", "ret": "retval", "arg": ""}], "cv::GFTTDetector::getDefaultName": [{"name": "getDefaultName", "ret": "retval", "arg": ""}], "cv::HistogramCostExtractor::setDefaultCost": [{"name": "setDefaultCost", "ret": "None", "arg": "defaultCost"}], "cv::intersectConvexConvex": [{"name": "intersectConvexConvex", "ret": "retval, _p12", "arg": "_p1, _p2[, _p12[, handleNested]]"}], "cv::Stitcher::compositingResol": [{"name": "compositingResol", "ret": "retval", "arg": ""}], "cv::ml::LogisticRegression::getMiniBatchSize": [{"name": "getMiniBatchSize", "ret": "retval", "arg": ""}], "cv::ml::KNearest::cv::ml::KNearest::create": [{"name": "create", "ret": "retval", "arg": ""}], "cv::invertAffineTransform": [{"name": "invertAffineTransform", "ret": "iM", "arg": "M[, iM]"}], "cv::FileNode::isReal": [{"name": "isReal", "ret": "retval", "arg": ""}], "cv::fisheye::stereoRectify": [{"name": "stereoRectify", "ret": "R1, R2, P1, P2, Q", "arg": "K1, D1, K2, D2, imageSize, R, tvec, flags[, R1[, R2[, P1[, P2[, Q[, newImageSize[, balance[, fov_scale]]]]]]]]"}], "cv::createBackgroundSubtractorMOG2": [{"name": "createBackgroundSubtractorMOG2", "ret": "retval", "arg": "[, history[, varThreshold[, detectShadows]]]"}], "cv::ORB::setWTA_K": [{"name": "setWTA_K", "ret": "None", "arg": "wta_k"}], "cv::imshow": [{"name": "imshow", "ret": "None", "arg": "winname, mat"}], "cv::blur": [{"name": "blur", "ret": "dst", "arg": "src, ksize[, dst[, anchor[, borderType]]]"}], "cv::cornerMinEigenVal": [{"name": "cornerMinEigenVal", "ret": "dst", "arg": "src, blockSize[, dst[, ksize[, borderType]]]"}], "cv::BackgroundSubtractorMOG2::apply": [{"name": "apply", "ret": "fgmask", "arg": "image[, fgmask[, learningRate]]"}], "cv::CirclesGridFinderParameters2::cv::CirclesGridFinderParameters2::CirclesGridFinderParameters2": [{"name": "CirclesGridFinderParameters2", "ret": "<CirclesGridFinderParameters2 object>", "arg": ""}], "cv::magnitude": [{"name": "magnitude", "ret": "magnitude", "arg": "x, y[, magnitude]"}], "cv::Feature2D::read": [{"name": "read", "ret": "None", "arg": "fileName"}], "cv::erode": [{"name": "erode", "ret": "dst", "arg": "src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]"}], "cv::TonemapReinhard::setLightAdaptation": [{"name": "setLightAdaptation", "ret": "None", "arg": "light_adapt"}], "cv::ml::SVM::cv::ml::SVM::create": [{"name": "create", "ret": "retval", "arg": ""}], "cv::imencode": [{"name": "imencode", "ret": "retval, buf", "arg": "ext, img[, params]"}], "cv::ml::SVM::getC": [{"name": "getC", "ret": "retval", "arg": ""}], "cv::SparsePyrLKOpticalFlow::create": [{"name": "SparsePyrLKOpticalFlow_create", "ret": "retval", "arg": "[, winSize[, maxLevel[, crit[, flags[, minEigThreshold]]]]]"}], "cv::BackgroundSubtractorMOG2::setVarThresholdGen": [{"name": "setVarThresholdGen", "ret": "None", "arg": "varThresholdGen"}], "cv::setUseOptimized": [{"name": "setUseOptimized", "ret": "None", "arg": "onoff"}], "cv::StereoBM::getPreFilterType": [{"name": "getPreFilterType", "ret": "retval", "arg": ""}], "cv::ml::EM::getTermCriteria": [{"name": "getTermCriteria", "ret": "retval", "arg": ""}], "cv::Subdiv2D::cv::Subdiv2D::Subdiv2D": [{"name": "Subdiv2D", "ret": "<Subdiv2D object>", "arg": ""}, {"name": "Subdiv2D", "ret": "<Subdiv2D object>", "arg": "rect"}], "cv::ml::EM::getCovs": [{"name": "getCovs", "ret": "covs", "arg": "[, covs]"}], "cv::ml::TrainData::getNSamples": [{"name": "getNSamples", "ret": "retval", "arg": ""}], "cv::ml::LogisticRegression::setMiniBatchSize": [{"name": "setMiniBatchSize", "ret": "None", "arg": "val"}], "cv::getBuildInformation": [{"name": "getBuildInformation", "ret": "retval", "arg": ""}], "cv::ml::ANN_MLP::setRpropDWMinus": [{"name": "setRpropDWMinus", "ret": "None", "arg": "val"}], "cv::ml::SVM::getP": [{"name": "getP", "ret": "retval", "arg": ""}], "cv::ml::TrainData::getClassLabels": [{"name": "getClassLabels", "ret": "retval", "arg": ""}], "cv::CamShift": [{"name": "CamShift", "ret": "retval, window", "arg": "probImage, window, criteria"}], "cv::BackgroundSubtractorKNN::getDetectShadows": [{"name": "getDetectShadows", "ret": "retval", "arg": ""}], "cv::DualTVL1OpticalFlow::setTau": [{"name": "setTau", "ret": "None", "arg": "val"}], "cv::VideoCapture::open": [{"name": "open", "ret": "retval", "arg": "filename"}, {"name": "open", "ret": "retval", "arg": "index"}, {"name": "open", "ret": "retval", "arg": "cameraNum, apiPreference"}, {"name": "open", "ret": "retval", "arg": "filename, apiPreference"}], "cv::KalmanFilter::cv::KalmanFilter::KalmanFilter": [{"name": "KalmanFilter", "ret": "<KalmanFilter object>", "arg": ""}, {"name": "KalmanFilter", "ret": "<KalmanFilter object>", "arg": "dynamParams, measureParams[, controlParams[, type]]"}], "cv::decomposeProjectionMatrix": [{"name": "decomposeProjectionMatrix", "ret": "cameraMatrix, rotMatrix, transVect, rotMatrixX, rotMatrixY, rotMatrixZ, eulerAngles", "arg": "projMatrix[, cameraMatrix[, rotMatrix[, transVect[, rotMatrixX[, rotMatrixY[, rotMatrixZ[, eulerAngles]]]]]]]"}], "cv::DualTVL1OpticalFlow::setLambda": [{"name": "setLambda", "ret": "None", "arg": "val"}], "cv::TonemapReinhard::setColorAdaptation": [{"name": "setColorAdaptation", "ret": "None", "arg": "color_adapt"}], "cv::DualTVL1OpticalFlow::setMedianFiltering": [{"name": "setMedianFiltering", "ret": "None", "arg": "val"}], "cv::SimpleBlobDetector::create": [{"name": "SimpleBlobDetector_create", "ret": "retval", "arg": "[, parameters]"}], "cv::stereoRectify": [{"name": "stereoRectify", "ret": "R1, R2, P1, P2, Q, validPixROI1, validPixROI2", "arg": "cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T[, R1[, R2[, P1[, P2[, Q[, flags[, alpha[, newImageSize]]]]]]]]"}], "cv::sortIdx": [{"name": "sortIdx", "ret": "dst", "arg": "src, flags[, dst]"}], "cv::ipp::useIPP_NE": [{"name": "useIPP_NE", "ret": "retval", "arg": ""}], "cv::flann::Index::radiusSearch": [{"name": "radiusSearch", "ret": "retval, indices, dists", "arg": "query, radius, maxResults[, indices[, dists[, params]]]"}], "cv::CascadeClassifier::convert": [{"name": "CascadeClassifier_convert", "ret": "retval", "arg": "oldcascade, newcascade"}], "cv::dnn::Net::setPreferableBackend": [{"name": "setPreferableBackend", "ret": "None", "arg": "backendId"}], "cv::ml::EM::cv::ml::EM::create": [{"name": "create", "ret": "retval", "arg": ""}], "cv::StereoBM::setTextureThreshold": [{"name": "setTextureThreshold", "ret": "None", "arg": "textureThreshold"}], "cv::getDefaultNewCameraMatrix": [{"name": "getDefaultNewCameraMatrix", "ret": "retval", "arg": "cameraMatrix[, imgsize[, centerPrincipalPoint]]"}], "cv::getGaussianKernel": [{"name": "getGaussianKernel", "ret": "retval", "arg": "ksize, sigma[, ktype]"}], "cv::max": [{"name": "max", "ret": "dst", "arg": "src1, src2[, dst]"}], "cv::matchShapes": [{"name": "matchShapes", "ret": "retval", "arg": "contour1, contour2, method, parameter"}], "cv::ml::ANN_MLP::cv::ml::ANN_MLP::create": [{"name": "create", "ret": "retval", "arg": ""}], "cv::AffineTransformer::getFullAffine": [{"name": "getFullAffine", "ret": "retval", "arg": ""}], "cv::cartToPolar": [{"name": "cartToPolar", "ret": "magnitude, angle", "arg": "x, y[, magnitude[, angle[, angleInDegrees]]]"}], "cv::SparsePyrLKOpticalFlow::setMinEigThreshold": [{"name": "setMinEigThreshold", "ret": "None", "arg": "minEigThreshold"}], "cv::ShapeContextDistanceExtractor::setImages": [{"name": "setImages", "ret": "None", "arg": "image1, image2"}], "cv::findCirclesGrid": [{"name": "findCirclesGrid", "ret": "retval, centers", "arg": "image, patternSize, flags, blobDetector, parameters[, centers]"}, {"name": "findCirclesGrid", "ret": "retval, centers", "arg": "image, patternSize[, centers[, flags[, blobDetector]]]"}], "cv::inpaint": [{"name": "inpaint", "ret": "dst", "arg": "src, inpaintMask, inpaintRadius, flags[, dst]"}], "cv::getRectSubPix": [{"name": "getRectSubPix", "ret": "patch", "arg": "image, patchSize, center[, patch[, patchType]]"}], "cv::dnn::createTensorflowImporter": [{"name": "createTensorflowImporter", "ret": "retval", "arg": "model"}], "cv::HOGDescriptor::load": [{"name": "load", "ret": "retval", "arg": "filename[, objname]"}], "cv::preCornerDetect": [{"name": "preCornerDetect", "ret": "dst", "arg": "src, ksize[, dst[, borderType]]"}], "cv::remap": [{"name": "remap", "ret": "dst", "arg": "src, map1, map2, interpolation[, dst[, borderMode[, borderValue]]]"}], "cv::grabCut": [{"name": "grabCut", "ret": "mask, bgdModel, fgdModel", "arg": "img, mask, rect, bgdModel, fgdModel, iterCount[, mode]"}], "cv::KAZE::setNOctaves": [{"name": "setNOctaves", "ret": "None", "arg": "octaves"}], "cv::fastAtan2": [{"name": "fastAtan2", "ret": "retval", "arg": "y, x"}], "cv::GFTTDetector::setBlockSize": [{"name": "setBlockSize", "ret": "None", "arg": "blockSize"}], "cv::dnn::DictValue::getIntValue": [{"name": "getIntValue", "ret": "retval", "arg": "[, idx]"}], "cv::StereoSGBM::cv::StereoSGBM::create": [{"name": "create", "ret": "retval", "arg": "[, minDisparity[, numDisparities[, blockSize[, P1[, P2[, disp12MaxDiff[, preFilterCap[, uniquenessRatio[, speckleWindowSize[, speckleRange[, mode]]]]]]]]]]]"}], "cv::ShapeContextDistanceExtractor::getStdDev": [{"name": "getStdDev", "ret": "retval", "arg": ""}], "cv::arcLength": [{"name": "arcLength", "ret": "retval", "arg": "curve, closed"}], "cv::CalibrateDebevec::getLambda": [{"name": "getLambda", "ret": "retval", "arg": ""}], "cv::convexHull": [{"name": "convexHull", "ret": "hull", "arg": "points[, hull[, clockwise[, returnPoints]]]"}], "cv::ml::ANN_MLP::getBackpropMomentumScale": [{"name": "getBackpropMomentumScale", "ret": "retval", "arg": ""}], "cv::solve": [{"name": "solve", "ret": "retval, dst", "arg": "src1, src2[, dst[, flags]]"}], "cv::ml::ANN_MLP::setBackpropMomentumScale": [{"name": "setBackpropMomentumScale", "ret": "None", "arg": "val"}], "cv::DualTVL1OpticalFlow::setTheta": [{"name": "setTheta", "ret": "None", "arg": "val"}], "cv::ml::SVMSGD::cv::ml::SVMSGD::load": [{"name": "load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::DenseOpticalFlow::calc": [{"name": "calc", "ret": "flow", "arg": "I0, I1, flow"}], "cv::KeyPoint::cv::KeyPoint::convert": [{"name": "convert", "ret": "points2f", "arg": "keypoints[, keypointIndexes]"}, {"name": "convert", "ret": "keypoints", "arg": "points2f[, size[, response[, octave[, class_id]]]]"}], "cv::adaptiveThreshold": [{"name": "adaptiveThreshold", "ret": "dst", "arg": "src, maxValue, adaptiveMethod, thresholdType, blockSize, C[, dst]"}], "cv::StereoMatcher::getSpeckleWindowSize": [{"name": "getSpeckleWindowSize", "ret": "retval", "arg": ""}], "cv::FileNode::isInt": [{"name": "isInt", "ret": "retval", "arg": ""}], "cv::copyMakeBorder": [{"name": "copyMakeBorder", "ret": "dst", "arg": "src, top, bottom, left, right, borderType[, dst[, value]]"}], "cv::ml::SVMSGD::setTermCriteria": [{"name": "setTermCriteria", "ret": "None", "arg": "val"}], "cv::dnn::readNetFromCaffe": [{"name": "readNetFromCaffe", "ret": "retval", "arg": "prototxt[, caffeModel]"}], "cv::clipLine": [{"name": "clipLine", "ret": "retval, pt1, pt2", "arg": "imgRect, pt1, pt2"}], "cv::GFTTDetector::getMinDistance": [{"name": "getMinDistance", "ret": "retval", "arg": ""}], "cv::BRISK::getDefaultName": [{"name": "getDefaultName", "ret": "retval", "arg": ""}], "cv::TonemapDrago::setBias": [{"name": "setBias", "ret": "None", "arg": "bias"}], "cv::NormHistogramCostExtractor::setNormFlag": [{"name": "setNormFlag", "ret": "None", "arg": "flag"}], "cv::VideoWriter::cv::VideoWriter::fourcc": [{"name": "fourcc", "ret": "retval", "arg": "c1, c2, c3, c4"}], "cv::CalibrateCRF::process": [{"name": "process", "ret": "dst", "arg": "src, times[, dst]"}], "cv::dnn::createTorchImporter": [{"name": "createTorchImporter", "ret": "retval", "arg": "filename[, isBinary]"}], "cv::StereoMatcher::getMinDisparity": [{"name": "getMinDisparity", "ret": "retval", "arg": ""}], "cv::FlannBasedMatcher::cv::FlannBasedMatcher::create": [{"name": "create", "ret": "retval", "arg": ""}], "cv::ml::TrainData::shuffleTrainTest": [{"name": "shuffleTrainTest", "ret": "None", "arg": ""}], "cv::filter2D": [{"name": "filter2D", "ret": "dst", "arg": "src, ddepth, kernel[, dst[, anchor[, delta[, borderType]]]]"}], "cv::ml::TrainData::getTrainResponses": [{"name": "getTrainResponses", "ret": "retval", "arg": ""}], "cv::Algorithm::getDefaultName": [{"name": "getDefaultName", "ret": "retval", "arg": ""}], "cv::ml::DTrees::setTruncatePrunedTree": [{"name": "setTruncatePrunedTree", "ret": "None", "arg": "val"}], "cv::setWindowProperty": [{"name": "setWindowProperty", "ret": "None", "arg": "winname, prop_id, prop_value"}], "cv::getTickFrequency": [{"name": "getTickFrequency", "ret": "retval", "arg": ""}], "cv::stereoCalibrate": [{"name": "stereoCalibrate", "ret": "retval, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, R, T, E, F", "arg": "objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize[, R[, T[, E[, F[, flags[, criteria]]]]]]"}], "cv::DescriptorMatcher::read": [{"name": "read", "ret": "None", "arg": "fileName"}], "cv::countNonZero": [{"name": "countNonZero", "ret": "retval", "arg": "src"}], "cv::StereoSGBM::setMode": [{"name": "setMode", "ret": "None", "arg": "mode"}], "cv::BackgroundSubtractorMOG2::setVarMax": [{"name": "setVarMax", "ret": "None", "arg": "varMax"}], "cv::FlannBasedMatcher::create": [{"name": "FlannBasedMatcher_create", "ret": "retval", "arg": ""}], "cv::StereoBM::setPreFilterCap": [{"name": "setPreFilterCap", "ret": "None", "arg": "preFilterCap"}], "cv::FarnebackOpticalFlow::setPolyN": [{"name": "setPolyN", "ret": "None", "arg": "polyN"}], "cv::TickMeter::cv::TickMeter::TickMeter": [{"name": "TickMeter", "ret": "<TickMeter object>", "arg": ""}], "cv::ml::SVMSGD::create": [{"name": "SVMSGD_create", "ret": "retval", "arg": ""}], "cv::Feature2D::descriptorSize": [{"name": "descriptorSize", "ret": "retval", "arg": ""}], "cv::FileStorage::getFirstTopLevelNode": [{"name": "getFirstTopLevelNode", "ret": "retval", "arg": ""}], "cv::pow": [{"name": "pow", "ret": "dst", "arg": "src, power[, dst]"}], "cv::findCirclesGrid2": [{"name": "findCirclesGrid2", "ret": "retval, centers", "arg": "image, patternSize, flags, blobDetector, parameters[, centers]"}], "cv::GFTTDetector::setQualityLevel": [{"name": "setQualityLevel", "ret": "None", "arg": "qlevel"}], "cv::ml::TrainData::getNVars": [{"name": "getNVars", "ret": "retval", "arg": ""}], "cv::flann::Index::getAlgorithm": [{"name": "getAlgorithm", "ret": "retval", "arg": ""}], "cv::ml::DTrees::setMinSampleCount": [{"name": "setMinSampleCount", "ret": "None", "arg": "val"}], "cv::DescriptorMatcher::cv::DescriptorMatcher::create": [{"name": "create", "ret": "retval", "arg": "descriptorMatcherType"}, {"name": "create", "ret": "retval", "arg": "matcherType"}], "cv::GaussianBlur": [{"name": "GaussianBlur", "ret": "dst", "arg": "src, ksize, sigmaX[, dst[, sigmaY[, borderType]]]"}], "cv::dnn::readTorchBlob": [{"name": "readTorchBlob", "ret": "retval", "arg": "filename[, isBinary]"}], "cv::createAlignMTB": [{"name": "createAlignMTB", "ret": "retval", "arg": "[, max_bits[, exclude_range[, cut]]]"}], "cv::createEMDHistogramCostExtractor": [{"name": "createEMDHistogramCostExtractor", "ret": "retval", "arg": "[, flag[, nDummies[, defaultCost]]]"}], "cv::haveOpenVX": [{"name": "haveOpenVX", "ret": "retval", "arg": ""}], "cv::dnn::Layer::finalize": [{"name": "finalize", "ret": "outputs", "arg": "inputs[, outputs]"}, {"name": "finalize", "ret": "retval", "arg": "inputs"}], "cv::bitwise_and": [{"name": "bitwise_and", "ret": "dst", "arg": "src1, src2[, dst[, mask]]"}], "cv::ml::SVM::setType": [{"name": "setType", "ret": "None", "arg": "val"}], "cv::checkRange": [{"name": "checkRange", "ret": "retval, pos", "arg": "a[, quiet[, minVal[, maxVal]]]"}], "cv::ml::KNearest::setAlgorithmType": [{"name": "setAlgorithmType", "ret": "None", "arg": "val"}], "cv::ml::LogisticRegression::getTrainMethod": [{"name": "getTrainMethod", "ret": "retval", "arg": ""}], "cv::dnn::Net::setInputsNames": [{"name": "setInputsNames", "ret": "None", "arg": "inputBlobNames"}], "cv::ml::LogisticRegression::getTermCriteria": [{"name": "getTermCriteria", "ret": "retval", "arg": ""}], "cv::ocl::haveOpenCL": [{"name": "haveOpenCL", "ret": "retval", "arg": ""}], "cv::MSER::setMinArea": [{"name": "setMinArea", "ret": "None", "arg": "minArea"}], "cv::StereoSGBM::setP1": [{"name": "setP1", "ret": "None", "arg": "P1"}], "cv::ml::EM::trainM": [{"name": "trainM", "ret": "retval, logLikelihoods, labels, probs", "arg": "samples, probs0[, logLikelihoods[, labels[, probs]]]"}], "cv::pencilSketch": [{"name": "pencilSketch", "ret": "dst1, dst2", "arg": "src[, dst1[, dst2[, sigma_s[, sigma_r[, shade_factor]]]]]"}], "cv::CLAHE::getClipLimit": [{"name": "getClipLimit", "ret": "retval", "arg": ""}], "cv::dnn::Layer::run": [{"name": "run", "ret": "outputs, internals", "arg": "inputs, internals[, outputs]"}], "cv::VideoCapture::cv::VideoCapture::VideoCapture": [{"name": "VideoCapture", "ret": "<VideoCapture object>", "arg": ""}, {"name": "VideoCapture", "ret": "<VideoCapture object>", "arg": "filename"}, {"name": "VideoCapture", "ret": "<VideoCapture object>", "arg": "filename, apiPreference"}, {"name": "VideoCapture", "ret": "<VideoCapture object>", "arg": "index"}], "cv::ml::EM::trainE": [{"name": "trainE", "ret": "retval, logLikelihoods, labels, probs", "arg": "samples, means0[, covs0[, weights0[, logLikelihoods[, labels[, probs]]]]]"}], "cv::StereoBM::getTextureThreshold": [{"name": "getTextureThreshold", "ret": "retval", "arg": ""}], "cv::BOWTrainer::getDescriptors": [{"name": "getDescriptors", "ret": "retval", "arg": ""}], "cv::MSER::getMinArea": [{"name": "getMinArea", "ret": "retval", "arg": ""}], "cv::DualTVL1OpticalFlow::setScalesNumber": [{"name": "setScalesNumber", "ret": "None", "arg": "val"}], "cv::createCalibrateDebevec": [{"name": "createCalibrateDebevec", "ret": "retval", "arg": "[, samples[, lambda[, random]]]"}], "cv::Stitcher::estimateTransform": [{"name": "estimateTransform", "ret": "retval", "arg": "images"}], "cv::CascadeClassifier::read": [{"name": "read", "ret": "retval", "arg": "node"}], "cv::equalizeHist": [{"name": "equalizeHist", "ret": "dst", "arg": "src[, dst]"}], "cv::setUseOpenVX": [{"name": "setUseOpenVX", "ret": "None", "arg": "flag"}], "cv::createStitcher": [{"name": "createStitcher", "ret": "retval", "arg": "[, try_use_gpu]"}], "cv::idft": [{"name": "idft", "ret": "dst", "arg": "src[, dst[, flags[, nonzeroRows]]]"}], "cv::DescriptorMatcher::knnMatch": [{"name": "knnMatch", "ret": "matches", "arg": "queryDescriptors, trainDescriptors, k[, mask[, compactResult]]"}, {"name": "knnMatch", "ret": "matches", "arg": "queryDescriptors, k[, masks[, compactResult]]"}], "cv::KAZE::setNOctaveLayers": [{"name": "setNOctaveLayers", "ret": "None", "arg": "octaveLayers"}], "cv::createMergeRobertson": [{"name": "createMergeRobertson", "ret": "retval", "arg": ""}], "cv::ml::DTrees::getCVFolds": [{"name": "getCVFolds", "ret": "retval", "arg": ""}], "cv::decolor": [{"name": "decolor", "ret": "grayscale, color_boost", "arg": "src[, grayscale[, color_boost]]"}], "cv::ml::NormalBayesClassifier::cv::ml::NormalBayesClassifier::load": [{"name": "load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::DescriptorMatcher::radiusMatch": [{"name": "radiusMatch", "ret": "matches", "arg": "queryDescriptors, trainDescriptors, maxDistance[, mask[, compactResult]]"}, {"name": "radiusMatch", "ret": "matches", "arg": "queryDescriptors, maxDistance[, masks[, compactResult]]"}], "cv::HausdorffDistanceExtractor::getRankProportion": [{"name": "getRankProportion", "ret": "retval", "arg": ""}], "cv::FarnebackOpticalFlow::setNumLevels": [{"name": "setNumLevels", "ret": "None", "arg": "numLevels"}], "cv::SparsePyrLKOpticalFlow::getFlags": [{"name": "getFlags", "ret": "retval", "arg": ""}], "cv::Stitcher::waveCorrection": [{"name": "waveCorrection", "ret": "retval", "arg": ""}], "cv::TonemapMantiuk::setSaturation": [{"name": "setSaturation", "ret": "None", "arg": "saturation"}], "cv::VideoWriter::get": [{"name": "get", "ret": "retval", "arg": "propId"}], "cv::getRotationMatrix2D": [{"name": "getRotationMatrix2D", "ret": "retval", "arg": "center, angle, scale"}], "cv::getDerivKernels": [{"name": "getDerivKernels", "ret": "kx, ky", "arg": "dx, dy, ksize[, kx[, ky[, normalize[, ktype]]]]"}], "cv::insertChannel": [{"name": "insertChannel", "ret": "dst", "arg": "src, dst, coi"}], "cv::HOGDescriptor::save": [{"name": "save", "ret": "None", "arg": "filename[, objname]"}], "cv::Feature2D::write": [{"name": "write", "ret": "None", "arg": "fileName"}], "cv::HoughLines": [{"name": "HoughLines", "ret": "lines", "arg": "image, rho, theta, threshold[, lines[, srn[, stn[, min_theta[, max_theta]]]]]"}], "cv::dnn::Net::setInput": [{"name": "setInput", "ret": "None", "arg": "blob[, name]"}], "cv::BackgroundSubtractorMOG2::setHistory": [{"name": "setHistory", "ret": "None", "arg": "history"}], "cv::VideoCapture::release": [{"name": "release", "ret": "None", "arg": ""}], "cv::createShapeContextDistanceExtractor": [{"name": "createShapeContextDistanceExtractor", "ret": "retval", "arg": "[, nAngularBins[, nRadialBins[, innerRadius[, outerRadius[, iterations[, comparer[, transformer]]]]]]]"}], "cv::BFMatcher::create": [{"name": "BFMatcher_create", "ret": "retval", "arg": "[, normType[, crossCheck]]"}], "cv::SparsePyrLKOpticalFlow::setTermCriteria": [{"name": "setTermCriteria", "ret": "None", "arg": "crit"}], "cv::ml::ParamGrid::cv::ml::ParamGrid::create": [{"name": "create", "ret": "retval", "arg": "[, minVal[, maxVal[, logstep]]]"}], "cv::ml::DTrees::getMinSampleCount": [{"name": "getMinSampleCount", "ret": "retval", "arg": ""}], "cv::SVDecomp": [{"name": "SVDecomp", "ret": "w, u, vt", "arg": "src[, w[, u[, vt[, flags]]]]"}], "cv::FarnebackOpticalFlow::setPyrScale": [{"name": "setPyrScale", "ret": "None", "arg": "pyrScale"}], "cv::flann::Index::knnSearch": [{"name": "knnSearch", "ret": "indices, dists", "arg": "query, knn[, indices[, dists[, params]]]"}], "cv::minAreaRect": [{"name": "minAreaRect", "ret": "retval", "arg": "points"}], "cv::PCABackProject": [{"name": "PCABackProject", "ret": "result", "arg": "data, mean, eigenvectors[, result]"}], "cv::LineSegmentDetector::detect": [{"name": "detect", "ret": "_lines, width, prec, nfa", "arg": "_image[, _lines[, width[, prec[, nfa]]]]"}], "cv::LineSegmentDetector::compareSegments": [{"name": "compareSegments", "ret": "retval, _image", "arg": "size, lines1, lines2[, _image]"}], "cv::ml::TrainData::getTrainSampleIdx": [{"name": "getTrainSampleIdx", "ret": "retval", "arg": ""}], "cv::applyColorMap": [{"name": "applyColorMap", "ret": "dst", "arg": "src, colormap[, dst]"}, {"name": "applyColorMap", "ret": "dst", "arg": "src, userColor[, dst]"}], "cv::TonemapDrago::setSaturation": [{"name": "setSaturation", "ret": "None", "arg": "saturation"}], "cv::ShapeContextDistanceExtractor::getAngularBins": [{"name": "getAngularBins", "ret": "retval", "arg": ""}], "cv::mixChannels": [{"name": "mixChannels", "ret": "dst", "arg": "src, dst, fromTo"}], "cv::boundingRect": [{"name": "boundingRect", "ret": "retval", "arg": "points"}], "cv::ml::KNearest::getDefaultK": [{"name": "getDefaultK", "ret": "retval", "arg": ""}], "cv::normalize": [{"name": "normalize", "ret": "dst", "arg": "src, dst[, alpha[, beta[, norm_type[, dtype[, mask]]]]]"}], "cv::AlignMTB::shiftMat": [{"name": "shiftMat", "ret": "dst", "arg": "src, shift[, dst]"}], "cv::Algorithm::save": [{"name": "save", "ret": "None", "arg": "filename"}], "cv::linearPolar": [{"name": "linearPolar", "ret": "dst", "arg": "src, center, maxRadius, flags[, dst]"}], "cv::TonemapDurand::setSigmaSpace": [{"name": "setSigmaSpace", "ret": "None", "arg": "sigma_space"}], "cv::transpose": [{"name": "transpose", "ret": "dst", "arg": "src[, dst]"}], "cv::FileStorage::isOpened": [{"name": "isOpened", "ret": "retval", "arg": ""}], "cv::BackgroundSubtractorKNN::getkNNSamples": [{"name": "getkNNSamples", "ret": "retval", "arg": ""}], "cv::BackgroundSubtractorMOG2::setComplexityReductionThreshold": [{"name": "setComplexityReductionThreshold", "ret": "None", "arg": "ct"}], "cv::dnn::Net::deleteLayer": [{"name": "deleteLayer", "ret": "None", "arg": "layer"}], "cv::getPerspectiveTransform": [{"name": "getPerspectiveTransform", "ret": "retval", "arg": "src, dst"}], "cv::ml::SVMSGD::setSvmsgdType": [{"name": "setSvmsgdType", "ret": "None", "arg": "svmsgdType"}], "cv::ml::LogisticRegression::cv::ml::LogisticRegression::create": [{"name": "create", "ret": "retval", "arg": ""}], "cv::dnn::Net::getLayer": [{"name": "getLayer", "ret": "retval", "arg": "layerId"}], "cv::AgastFeatureDetector::getDefaultName": [{"name": "getDefaultName", "ret": "retval", "arg": ""}], "cv::ocl::setUseOpenCL": [{"name": "setUseOpenCL", "ret": "None", "arg": "flag"}], "cv::FarnebackOpticalFlow::getNumLevels": [{"name": "getNumLevels", "ret": "retval", "arg": ""}], "cv::stylization": [{"name": "stylization", "ret": "dst", "arg": "src[, dst[, sigma_s[, sigma_r]]]"}], "cv::dnn::readNetFromDarknet": [{"name": "readNetFromDarknet", "ret": "retval", "arg": "cfgFile[, darknetModel]"}], "cv::Feature2D::getDefaultName": [{"name": "getDefaultName", "ret": "retval", "arg": ""}], "cv::dnn::DictValue::getRealValue": [{"name": "getRealValue", "ret": "retval", "arg": "[, idx]"}], "cv::FileStorage::writeComment": [{"name": "writeComment", "ret": "None", "arg": "comment[, append]"}], "cv::ORB::setPatchSize": [{"name": "setPatchSize", "ret": "None", "arg": "patchSize"}], "cv::waitKeyEx": [{"name": "waitKeyEx", "ret": "retval", "arg": "[, delay]"}], "cv::fillPoly": [{"name": "fillPoly", "ret": "img", "arg": "img, pts, color[, lineType[, shift[, offset]]]"}], "cv::BackgroundSubtractorMOG2::getDetectShadows": [{"name": "getDetectShadows", "ret": "retval", "arg": ""}], "cv::createHanningWindow": [{"name": "createHanningWindow", "ret": "dst", "arg": "winSize, type[, dst]"}], "cv::sqrt": [{"name": "sqrt", "ret": "dst", "arg": "src[, dst]"}], "cv::TonemapDurand::getSigmaSpace": [{"name": "getSigmaSpace", "ret": "retval", "arg": ""}], "cv::setRNGSeed": [{"name": "setRNGSeed", "ret": "None", "arg": "seed"}], "cv::ml::ANN_MLP::setTrainMethod": [{"name": "setTrainMethod", "ret": "None", "arg": "method[, param1[, param2]]"}], "cv::setTrackbarMin": [{"name": "setTrackbarMin", "ret": "None", "arg": "trackbarname, winname, minval"}], "cv::PCAProject": [{"name": "PCAProject", "ret": "result", "arg": "data, mean, eigenvectors[, result]"}], "cv::ml::TrainData::getTrainNormCatResponses": [{"name": "getTrainNormCatResponses", "ret": "retval", "arg": ""}], "cv::ml::LogisticRegression::getIterations": [{"name": "getIterations", "ret": "retval", "arg": ""}], "cv::useOptimized": [{"name": "useOptimized", "ret": "retval", "arg": ""}], "cv::sqrBoxFilter": [{"name": "sqrBoxFilter", "ret": "_dst", "arg": "_src, ddepth, ksize[, _dst[, anchor[, normalize[, borderType]]]]"}], "cv::AKAZE::getThreshold": [{"name": "getThreshold", "ret": "retval", "arg": ""}], "cv::ml::SVMSGD::setInitialStepSize": [{"name": "setInitialStepSize", "ret": "None", "arg": "InitialStepSize"}], "cv::FileNode::mat": [{"name": "mat", "ret": "retval", "arg": ""}], "cv::boxFilter": [{"name": "boxFilter", "ret": "dst", "arg": "src, ddepth, ksize[, dst[, anchor[, normalize[, borderType]]]]"}], "cv::GFTTDetector::create": [{"name": "GFTTDetector_create", "ret": "retval", "arg": "[, maxCorners[, qualityLevel[, minDistance[, blockSize[, useHarrisDetector[, k]]]]]]"}, {"name": "GFTTDetector_create", "ret": "retval", "arg": "maxCorners, qualityLevel, minDistance, blockSize, gradiantSize[, useHarrisDetector[, k]]"}], "cv::MSER::getMaxArea": [{"name": "getMaxArea", "ret": "retval", "arg": ""}], "cv::setWindowTitle": [{"name": "setWindowTitle", "ret": "None", "arg": "winname, title"}], "cv::MSER::setPass2Only": [{"name": "setPass2Only", "ret": "None", "arg": "f"}], "cv::decomposeHomographyMat": [{"name": "decomposeHomographyMat", "ret": "retval, rotations, translations, normals", "arg": "H, K[, rotations[, translations[, normals]]]"}], "cv::TonemapMantiuk::setScale": [{"name": "setScale", "ret": "None", "arg": "scale"}], "cv::randu": [{"name": "randu", "ret": "dst", "arg": "dst, low, high"}], "cv::ShapeContextDistanceExtractor::setCostExtractor": [{"name": "setCostExtractor", "ret": "None", "arg": "comparer"}], "cv::GFTTDetector::setMaxFeatures": [{"name": "setMaxFeatures", "ret": "None", "arg": "maxFeatures"}], "cv::setNumThreads": [{"name": "setNumThreads", "ret": "None", "arg": "nthreads"}], "cv::createCLAHE": [{"name": "createCLAHE", "ret": "retval", "arg": "[, clipLimit[, tileGridSize]]"}], "cv::MergeMertens::getSaturationWeight": [{"name": "getSaturationWeight", "ret": "retval", "arg": ""}], "cv::ml::DTrees::getTruncatePrunedTree": [{"name": "getTruncatePrunedTree", "ret": "retval", "arg": ""}], "cv::getWindowProperty": [{"name": "getWindowProperty", "ret": "retval", "arg": "winname, prop_id"}], "cv::TickMeter::start": [{"name": "start", "ret": "None", "arg": ""}], "cv::CalibrateRobertson::getThreshold": [{"name": "getThreshold", "ret": "retval", "arg": ""}], "cv::ml::SVM::getType": [{"name": "getType", "ret": "retval", "arg": ""}], "cv::buildOpticalFlowPyramid": [{"name": "buildOpticalFlowPyramid", "ret": "retval, pyramid", "arg": "img, winSize, maxLevel[, pyramid[, withDerivatives[, pyrBorder[, derivBorder[, tryReuseInputImage]]]]]"}], "cv::sum": [{"name": "sumElems", "ret": "retval", "arg": "src"}], "cv::ORB::getFastThreshold": [{"name": "getFastThreshold", "ret": "retval", "arg": ""}], "cv::warpPerspective": [{"name": "warpPerspective", "ret": "dst", "arg": "src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]]"}], "cv::VideoWriter::cv::VideoWriter::VideoWriter": [{"name": "VideoWriter", "ret": "<VideoWriter object>", "arg": ""}, {"name": "VideoWriter", "ret": "<VideoWriter object>", "arg": "filename, fourcc, fps, frameSize[, isColor]"}, {"name": "VideoWriter", "ret": "<VideoWriter object>", "arg": "filename, apiPreference, fourcc, fps, frameSize[, isColor]"}], "cv::idct": [{"name": "idct", "ret": "dst", "arg": "src[, dst[, flags]]"}], "cv::CalibrateRobertson::getRadiance": [{"name": "getRadiance", "ret": "retval", "arg": ""}], "cv::ml::TrainData::getNTestSamples": [{"name": "getNTestSamples", "ret": "retval", "arg": ""}], "cv::HOGDescriptor::computeGradient": [{"name": "computeGradient", "ret": "grad, angleOfs", "arg": "img[, grad[, angleOfs[, paddingTL[, paddingBR]]]]"}], "cv::ShapeContextDistanceExtractor::setIterations": [{"name": "setIterations", "ret": "None", "arg": "iterations"}], "cv::ShapeContextDistanceExtractor::setOuterRadius": [{"name": "setOuterRadius", "ret": "None", "arg": "outerRadius"}], "cv::accumulateWeighted": [{"name": "accumulateWeighted", "ret": "dst", "arg": "src, dst, alpha[, mask]"}], "cv::ORB::getDefaultName": [{"name": "getDefaultName", "ret": "retval", "arg": ""}], "cv::ml::ANN_MLP::setRpropDW0": [{"name": "setRpropDW0", "ret": "None", "arg": "val"}], "cv::EMDHistogramCostExtractor::getNormFlag": [{"name": "getNormFlag", "ret": "retval", "arg": ""}], "cv::AffineTransformer::setFullAffine": [{"name": "setFullAffine", "ret": "None", "arg": "fullAffine"}], "cv::dnn::blobFromImages": [{"name": "blobFromImages", "ret": "retval", "arg": "images[, scalefactor[, size[, mean[, swapRB[, crop]]]]]"}], "cv::findNonZero": [{"name": "findNonZero", "ret": "idx", "arg": "src[, idx]"}], "cv::calcCovarMatrix": [{"name": "calcCovarMatrix", "ret": "covar, mean", "arg": "samples, mean, flags[, covar[, ctype]]"}], "cv::repeat": [{"name": "repeat", "ret": "dst", "arg": "src, ny, nx[, dst]"}], "cv::dnn::readNetFromTensorflow": [{"name": "readNetFromTensorflow", "ret": "retval", "arg": "model[, config]"}], "cv::ml::DTrees::getMaxDepth": [{"name": "getMaxDepth", "ret": "retval", "arg": ""}], "cv::ml::ANN_MLP::create": [{"name": "ANN_MLP_create", "ret": "retval", "arg": ""}], "cv::ml::NormalBayesClassifier::cv::ml::NormalBayesClassifier::create": [{"name": "create", "ret": "retval", "arg": ""}], "cv::ml::SVMSGD::getMarginType": [{"name": "getMarginType", "ret": "retval", "arg": ""}], "cv::TonemapReinhard::getColorAdaptation": [{"name": "getColorAdaptation", "ret": "retval", "arg": ""}], "cv::FarnebackOpticalFlow::cv::FarnebackOpticalFlow::create": [{"name": "create", "ret": "retval", "arg": "[, numLevels[, pyrScale[, fastPyramids[, winSize[, numIters[, polyN[, polySigma[, flags]]]]]]]]"}], "cv::colorChange": [{"name": "colorChange", "ret": "dst", "arg": "src, mask[, dst[, red_mul[, green_mul[, blue_mul]]]]"}], "cv::VideoWriter::fourcc": [{"name": "VideoWriter_fourcc", "ret": "retval", "arg": "c1, c2, c3, c4"}], "cv::CirclesGridFinderParameters::cv::CirclesGridFinderParameters::CirclesGridFinderParameters": [{"name": "CirclesGridFinderParameters", "ret": "<CirclesGridFinderParameters object>", "arg": ""}], "cv::useOpenVX": [{"name": "useOpenVX", "ret": "retval", "arg": ""}], "cv::SparsePyrLKOpticalFlow::cv::SparsePyrLKOpticalFlow::create": [{"name": "create", "ret": "retval", "arg": "[, winSize[, maxLevel[, crit[, flags[, minEigThreshold]]]]]"}], "cv::ORB::cv::ORB::create": [{"name": "create", "ret": "retval", "arg": "[, nfeatures[, scaleFactor[, nlevels[, edgeThreshold[, firstLevel[, WTA_K[, scoreType[, patchSize[, fastThreshold]]]]]]]]]"}], "cv::TonemapDrago::getBias": [{"name": "getBias", "ret": "retval", "arg": ""}], "cv::ml::DTrees::getUseSurrogates": [{"name": "getUseSurrogates", "ret": "retval", "arg": ""}], "cv::dilate": [{"name": "dilate", "ret": "dst", "arg": "src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]"}], "cv::FileNode::isMap": [{"name": "isMap", "ret": "retval", "arg": ""}], "cv::CalibrateDebevec::setLambda": [{"name": "setLambda", "ret": "None", "arg": "lambda"}], "cv::FastFeatureDetector::getType": [{"name": "getType", "ret": "retval", "arg": ""}], "cv::getNumberOfCPUs": [{"name": "getNumberOfCPUs", "ret": "retval", "arg": ""}], "cv::threshold": [{"name": "threshold", "ret": "retval, dst", "arg": "src, thresh, maxval, type[, dst]"}], "cv::KAZE::getNOctaveLayers": [{"name": "getNOctaveLayers", "ret": "retval", "arg": ""}], "cv::ml::RTrees::getCalculateVarImportance": [{"name": "getCalculateVarImportance", "ret": "retval", "arg": ""}], "cv::AKAZE::setDescriptorChannels": [{"name": "setDescriptorChannels", "ret": "None", "arg": "dch"}], "cv::ml::LogisticRegression::create": [{"name": "LogisticRegression_create", "ret": "retval", "arg": ""}], "cv::drawContours": [{"name": "drawContours", "ret": "image", "arg": "image, contours, contourIdx, color[, thickness[, lineType[, hierarchy[, maxLevel[, offset]]]]]"}], "cv::ORB::setScoreType": [{"name": "setScoreType", "ret": "None", "arg": "scoreType"}], "cv::StereoMatcher::getSpeckleRange": [{"name": "getSpeckleRange", "ret": "retval", "arg": ""}], "cv::getGaborKernel": [{"name": "getGaborKernel", "ret": "retval", "arg": "ksize, sigma, theta, lambd, gamma[, psi[, ktype]]"}], "cv::dnn::DictValue::isReal": [{"name": "isReal", "ret": "retval", "arg": ""}], "cv::pointPolygonTest": [{"name": "pointPolygonTest", "ret": "retval", "arg": "contour, pt, measureDist"}], "cv::fisheye::undistortPoints": [{"name": "undistortPoints", "ret": "undistorted", "arg": "distorted, K, D[, undistorted[, R[, P]]]"}], "cv::ml::Boost::setWeakCount": [{"name": "setWeakCount", "ret": "None", "arg": "val"}], "cv::medianBlur": [{"name": "medianBlur", "ret": "dst", "arg": "src, ksize[, dst]"}], "cv::ml::Boost::setBoostType": [{"name": "setBoostType", "ret": "None", "arg": "val"}], "cv::HoughLinesP": [{"name": "HoughLinesP", "ret": "lines", "arg": "image, rho, theta, threshold[, lines[, minLineLength[, maxLineGap]]]"}], "cv::ORB::setFastThreshold": [{"name": "setFastThreshold", "ret": "None", "arg": "fastThreshold"}], "cv::MSER::getDefaultName": [{"name": "getDefaultName", "ret": "retval", "arg": ""}], "cv::ml::TrainData::setTrainTestSplitRatio": [{"name": "setTrainTestSplitRatio", "ret": "None", "arg": "ratio[, shuffle]"}], "cv::ml::TrainData::getTestSampleWeights": [{"name": "getTestSampleWeights", "ret": "retval", "arg": ""}], "cv::Mahalanobis": [{"name": "Mahalanobis", "ret": "retval", "arg": "v1, v2, icovar"}], "cv::ml::SVM::getClassWeights": [{"name": "getClassWeights", "ret": "retval", "arg": ""}], "cv::getOptimalDFTSize": [{"name": "getOptimalDFTSize", "ret": "retval", "arg": "vecsize"}], "cv::ellipse2Poly": [{"name": "ellipse2Poly", "ret": "pts", "arg": "center, axes, angle, arcStart, arcEnd, delta"}], "cv::min": [{"name": "min", "ret": "dst", "arg": "src1, src2[, dst]"}], "cv::CascadeClassifier::getFeatureType": [{"name": "getFeatureType", "ret": "retval", "arg": ""}], "cv::phase": [{"name": "phase", "ret": "angle", "arg": "x, y[, angle[, angleInDegrees]]"}], "cv::dnn::Net::forward": [{"name": "forward", "ret": "retval", "arg": "[, outputName]"}, {"name": "forward", "ret": "None", "arg": "outputBlobs[, outputName]"}, {"name": "forward", "ret": "None", "arg": "outputBlobs, outBlobNames"}], "cv::solveCubic": [{"name": "solveCubic", "ret": "retval, roots", "arg": "coeffs[, roots]"}], "cv::ml::EM::getWeights": [{"name": "getWeights", "ret": "retval", "arg": ""}], "cv::ml::SVM::getDegree": [{"name": "getDegree", "ret": "retval", "arg": ""}], "cv::split": [{"name": "split", "ret": "mv", "arg": "m[, mv]"}], "cv::StereoMatcher::getDisp12MaxDiff": [{"name": "getDisp12MaxDiff", "ret": "retval", "arg": ""}], "cv::BackgroundSubtractorMOG2::setVarInit": [{"name": "setVarInit", "ret": "None", "arg": "varInit"}], "cv::minEnclosingTriangle": [{"name": "minEnclosingTriangle", "ret": "retval, triangle", "arg": "points[, triangle]"}], "cv::HOGDescriptor::detect": [{"name": "detect", "ret": "foundLocations, weights", "arg": "img[, hitThreshold[, winStride[, padding[, searchLocations]]]]"}], "cv::ml::SVM::getDefaultGridPtr": [{"name": "SVM_getDefaultGridPtr", "ret": "retval", "arg": "param_id"}], "cv::ShapeContextDistanceExtractor::getShapeContextWeight": [{"name": "getShapeContextWeight", "ret": "retval", "arg": ""}], "cv::DescriptorMatcher::create": [{"name": "DescriptorMatcher_create", "ret": "retval", "arg": "descriptorMatcherType"}, {"name": "DescriptorMatcher_create", "ret": "retval", "arg": "matcherType"}], "cv::DescriptorMatcher::add": [{"name": "add", "ret": "None", "arg": "descriptors"}], "cv::StereoBM::getPreFilterSize": [{"name": "getPreFilterSize", "ret": "retval", "arg": ""}], "cv::dnn::readNetFromTorch": [{"name": "readNetFromTorch", "ret": "retval", "arg": "model[, isBinary]"}], "cv::composeRT": [{"name": "composeRT", "ret": "rvec3, tvec3, dr3dr1, dr3dt1, dr3dr2, dr3dt2, dt3dr1, dt3dt1, dt3dr2, dt3dt2", "arg": "rvec1, tvec1, rvec2, tvec2[, rvec3[, tvec3[, dr3dr1[, dr3dt1[, dr3dr2[, dr3dt2[, dt3dr1[, dt3dt1[, dt3dr2[, dt3dt2]]]]]]]]]]"}], "cv::ml::DTrees::cv::ml::DTrees::load": [{"name": "load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::HOGDescriptor::checkDetectorSize": [{"name": "checkDetectorSize", "ret": "retval", "arg": ""}], "cv::morphologyEx": [{"name": "morphologyEx", "ret": "dst", "arg": "src, op, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]"}], "cv::dnn::createCaffeImporter": [{"name": "createCaffeImporter", "ret": "retval", "arg": "prototxt[, caffeModel]"}], "cv::BackgroundSubtractorKNN::setNSamples": [{"name": "setNSamples", "ret": "None", "arg": "_nN"}], "cv::convertFp16": [{"name": "convertFp16", "ret": "dst", "arg": "src[, dst]"}], "cv::MSER::detectRegions": [{"name": "detectRegions", "ret": "msers, bboxes", "arg": "image"}], "cv::CascadeClassifier::cv::CascadeClassifier::convert": [{"name": "convert", "ret": "retval", "arg": "oldcascade, newcascade"}], "cv::ml::ANN_MLP::load": [{"name": "ANN_MLP_load", "ret": "retval", "arg": "filepath"}], "cv::StereoBM::setPreFilterType": [{"name": "setPreFilterType", "ret": "None", "arg": "preFilterType"}], "cv::BackgroundSubtractorMOG2::setVarThreshold": [{"name": "setVarThreshold", "ret": "None", "arg": "varThreshold"}], "cv::ORB::getScaleFactor": [{"name": "getScaleFactor", "ret": "retval", "arg": ""}], "cv::ml::TrainData::getSubVector": [{"name": "TrainData_getSubVector", "ret": "retval", "arg": "vec, idx"}], "cv::fisheye::distortPoints": [{"name": "distortPoints", "ret": "distorted", "arg": "undistorted, K, D[, distorted[, alpha]]"}], "cv::textureFlattening": [{"name": "textureFlattening", "ret": "dst", "arg": "src, mask[, dst[, low_threshold[, high_threshold[, kernel_size]]]]"}], "cv::displayStatusBar": [{"name": "displayStatusBar", "ret": "None", "arg": "winname, text[, delayms]"}], "cv::ml::TrainData::cv::ml::TrainData::getSubVector": [{"name": "getSubVector", "ret": "retval", "arg": "vec, idx"}], "cv::fastNlMeansDenoising": [{"name": "fastNlMeansDenoising", "ret": "dst", "arg": "src[, dst[, h[, templateWindowSize[, searchWindowSize]]]]"}, {"name": "fastNlMeansDenoising", "ret": "dst", "arg": "src, h[, dst[, templateWindowSize[, searchWindowSize[, normType]]]]"}], "cv::VideoWriter::release": [{"name": "release", "ret": "None", "arg": ""}], "cv::BOWKMeansTrainer::cv::BOWKMeansTrainer::BOWKMeansTrainer": [{"name": "BOWKMeansTrainer", "ret": "<BOWKMeansTrainer object>", "arg": "clusterCount[, termcrit[, attempts[, flags]]]"}], "cv::AgastFeatureDetector::setType": [{"name": "setType", "ret": "None", "arg": "type"}], "cv::getTrackbarPos": [{"name": "getTrackbarPos", "ret": "retval", "arg": "trackbarname, winname"}], "cv::KAZE::getDefaultName": [{"name": "getDefaultName", "ret": "retval", "arg": ""}], "cv::FileStorage::write": [{"name": "write", "ret": "None", "arg": "name, val"}], "cv::ml::StatModel::isTrained": [{"name": "isTrained", "ret": "retval", "arg": ""}], "cv::ipp::setUseIPP_NE": [{"name": "setUseIPP_NE", "ret": "None", "arg": "flag"}], "cv::DualTVL1OpticalFlow::setUseInitialFlow": [{"name": "setUseInitialFlow", "ret": "None", "arg": "val"}], "cv::ml::SVMSGD::setMarginType": [{"name": "setMarginType", "ret": "None", "arg": "marginType"}], "cv::dnn::Net::getUnconnectedOutLayers": [{"name": "getUnconnectedOutLayers", "ret": "retval", "arg": ""}], "cv::LUT": [{"name": "LUT", "ret": "dst", "arg": "src, lut[, dst]"}], "cv::ShapeContextDistanceExtractor::setBendingEnergyWeight": [{"name": "setBendingEnergyWeight", "ret": "None", "arg": "bendingEnergyWeight"}], "cv::ORB::setEdgeThreshold": [{"name": "setEdgeThreshold", "ret": "None", "arg": "edgeThreshold"}], "cv::TonemapReinhard::setIntensity": [{"name": "setIntensity", "ret": "None", "arg": "intensity"}], "cv::ml::SVMSGD::load": [{"name": "SVMSGD_load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::ml::RTrees::load": [{"name": "RTrees_load", "ret": "retval", "arg": "filepath[, nodeName]"}], "cv::ml::SVM::setCoef0": [{"name": "setCoef0", "ret": "None", "arg": "val"}], "cv::convertScaleAbs": [{"name": "convertScaleAbs", "ret": "dst", "arg": "src[, dst[, alpha[, beta]]]"}], "cv::ORB::setMaxFeatures": [{"name": "setMaxFeatures", "ret": "None", "arg": "maxFeatures"}], "cv::dnn::Importer::populateNet": [{"name": "populateNet", "ret": "None", "arg": "net"}], "cv::dnn::Net::setPreferableTarget": [{"name": "setPreferableTarget", "ret": "None", "arg": "targetId"}], "cv::HoughCircles": [{"name": "HoughCircles", "ret": "circles", "arg": "image, method, dp, minDist[, circles[, param1[, param2[, minRadius[, maxRadius]]]]]"}], "cv::fisheye::projectPoints": [{"name": "projectPoints", "ret": "imagePoints, jacobian", "arg": "objectPoints, rvec, tvec, K, D[, imagePoints[, alpha[, jacobian]]]"}], "cv::ml::ANN_MLP::setRpropDWMax": [{"name": "setRpropDWMax", "ret": "None", "arg": "val"}], "cv::AKAZE::setNOctaveLayers": [{"name": "setNOctaveLayers", "ret": "None", "arg": "octaveLayers"}], "cv::DualTVL1OpticalFlow::setInnerIterations": [{"name": "setInnerIterations", "ret": "None", "arg": "val"}], "cv::StereoBM::getSmallerBlockSize": [{"name": "getSmallerBlockSize", "ret": "retval", "arg": ""}]}